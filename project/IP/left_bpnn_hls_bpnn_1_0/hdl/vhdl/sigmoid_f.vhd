-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sigmoid_f is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sigm_din_V : IN STD_LOGIC_VECTOR (19 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of sigmoid_f is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_const_lv20_3FFFD : STD_LOGIC_VECTOR (19 downto 0) := "00111111111111111101";
    constant ap_const_lv20_E0000 : STD_LOGIC_VECTOR (19 downto 0) := "11100000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_E4000 : STD_LOGIC_VECTOR (19 downto 0) := "11100100000000000000";
    constant ap_const_lv20_E8000 : STD_LOGIC_VECTOR (19 downto 0) := "11101000000000000000";
    constant ap_const_lv20_EC000 : STD_LOGIC_VECTOR (19 downto 0) := "11101100000000000000";
    constant ap_const_lv20_F0000 : STD_LOGIC_VECTOR (19 downto 0) := "11110000000000000000";
    constant ap_const_lv20_F4000 : STD_LOGIC_VECTOR (19 downto 0) := "11110100000000000000";
    constant ap_const_lv20_F8000 : STD_LOGIC_VECTOR (19 downto 0) := "11111000000000000000";
    constant ap_const_lv20_FC000 : STD_LOGIC_VECTOR (19 downto 0) := "11111100000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv20_C000 : STD_LOGIC_VECTOR (19 downto 0) := "00001100000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv20_14000 : STD_LOGIC_VECTOR (19 downto 0) := "00010100000000000000";
    constant ap_const_lv20_18000 : STD_LOGIC_VECTOR (19 downto 0) := "00011000000000000000";
    constant ap_const_lv20_1C000 : STD_LOGIC_VECTOR (19 downto 0) := "00011100000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv20_40000 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal poly_coe_V_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal poly_coe_V_0_ce0 : STD_LOGIC;
    signal poly_coe_V_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal poly_coe_V_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal poly_coe_V_1_ce0 : STD_LOGIC;
    signal poly_coe_V_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal poly_coe_V_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal poly_coe_V_2_ce0 : STD_LOGIC;
    signal poly_coe_V_2_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal poly_coe_V_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal poly_coe_V_3_ce0 : STD_LOGIC;
    signal poly_coe_V_3_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_546_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_550_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_593_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_593_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_593_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_593_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_593_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_593_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_378_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_reg_599 : STD_LOGIC_VECTOR (17 downto 0);
    signal poly_din_abs_V_fu_395_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal poly_din_abs_V_reg_625 : STD_LOGIC_VECTOR (17 downto 0);
    signal poly_din_abs_V_reg_625_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal poly_din_abs_V_reg_625_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal poly_din_abs_V_reg_625_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal poly_coe_V_0_load_reg_634 : STD_LOGIC_VECTOR (13 downto 0);
    signal poly_coe_V_1_load_reg_639 : STD_LOGIC_VECTOR (15 downto 0);
    signal poly_coe_V_1_load_reg_639_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal poly_coe_V_1_load_reg_639_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal poly_coe_V_2_load_reg_644 : STD_LOGIC_VECTOR (16 downto 0);
    signal poly_coe_V_2_load_reg_644_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal poly_coe_V_2_load_reg_644_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_5_reg_649 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_reg_649_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_reg_649_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_reg_649_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_reg_649_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_reg_649_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_413_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_reg_659 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_2_fu_534_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_2_reg_674 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_3_fu_540_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_3_reg_679 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_3_reg_679_pp0_iter5_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_3_reg_679_pp0_iter6_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_s_reg_684 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_1_fu_446_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_1_reg_689 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_2_fu_463_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_2_reg_694 : STD_LOGIC_VECTOR (64 downto 0);
    signal poly_temp_V_fu_521_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal poly_temp_V_reg_699 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_p_0_phi_fu_167_p28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_reg_164 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_1_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_2_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_3_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_4_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_5_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_6_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp7_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_s_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_7_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_8_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_361_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_agg_result_V_phi_fu_215_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter8_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter0_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter1_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter2_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter3_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter4_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter5_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter6_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_reg_pp0_iter7_agg_result_V_reg_210 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_i_i_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_231_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_289_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_305_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_327_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_9_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal poly_din_abs_V_cast_fu_390_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_fu_413_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_413_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_428_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_fu_446_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_1_fu_446_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_i_i_fu_452_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_i_cast_fu_459_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_5_i_i_fu_471_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_5_i_i_cast_cast_fu_478_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_3_i_i_cast_fu_468_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_8_i_i_fu_488_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_8_i_i_cast_cast_fu_495_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_Val2_4_fu_482_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal p_Val2_6_fu_499_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal poly_eq_dout_V_fu_505_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_9_i_fu_515_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_fu_528_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_fu_534_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal OP2_V_cast3_fu_419_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Val2_3_fu_540_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_3_fu_540_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to7 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_428_p10 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_1_fu_446_p10 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_3_fu_540_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_1_fu_413_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_528_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_71 : BOOLEAN;

    component bpnn_mul_48s_18nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component bpnn_mul_mul_18nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bpnn_mul_mul_16s_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component bpnn_mul_mul_17nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component sigmoid_f_poly_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component sigmoid_f_poly_cocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sigmoid_f_poly_codEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component sigmoid_f_poly_coeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    poly_coe_V_0_U : component sigmoid_f_poly_cobkb
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poly_coe_V_0_address0,
        ce0 => poly_coe_V_0_ce0,
        q0 => poly_coe_V_0_q0);

    poly_coe_V_1_U : component sigmoid_f_poly_cocud
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poly_coe_V_1_address0,
        ce0 => poly_coe_V_1_ce0,
        q0 => poly_coe_V_1_q0);

    poly_coe_V_2_U : component sigmoid_f_poly_codEe
    generic map (
        DataWidth => 17,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poly_coe_V_2_address0,
        ce0 => poly_coe_V_2_ce0,
        q0 => poly_coe_V_2_q0);

    poly_coe_V_3_U : component sigmoid_f_poly_coeOg
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poly_coe_V_3_address0,
        ce0 => poly_coe_V_3_ce0,
        q0 => poly_coe_V_3_q0);

    bpnn_mul_48s_18nsfYi_U1 : component bpnn_mul_48s_18nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 48,
        din1_WIDTH => 18,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_1_reg_659,
        din1 => grp_fu_428_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_428_p2);

    bpnn_mul_mul_18nsg8j_U2 : component bpnn_mul_mul_18nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 14,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_fu_528_p0,
        din1 => poly_coe_V_0_load_reg_634,
        dout => r_V_fu_528_p2);

    bpnn_mul_mul_16s_hbi_U3 : component bpnn_mul_mul_16s_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => poly_coe_V_1_load_reg_639_pp0_iter3_reg,
        din1 => r_V_2_fu_534_p1,
        dout => r_V_2_fu_534_p2);

    bpnn_mul_mul_17nsibs_U4 : component bpnn_mul_mul_17nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => p_Val2_3_fu_540_p0,
        din1 => p_Val2_3_fu_540_p1,
        dout => p_Val2_3_fu_540_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_agg_result_V_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_71)) then
                if (((icmp_fu_241_p2 = ap_const_lv1_0) and (tmp_fu_225_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_agg_result_V_reg_210 <= ap_const_lv20_3FFFD;
                elsif ((tmp_fu_225_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_agg_result_V_reg_210 <= ap_const_lv20_2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter0_agg_result_V_reg_210;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter1_agg_result_V_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter2_agg_result_V_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter3_agg_result_V_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter5_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter4_agg_result_V_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter5_agg_result_V_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter7_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter6_agg_result_V_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter8_agg_result_V_reg_210 <= ap_phi_reg_pp0_iter7_agg_result_V_reg_210;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_225_p2 = ap_const_lv1_0))) then
                icmp_reg_550 <= icmp_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_reg_550_pp0_iter1_reg <= icmp_reg_550;
                tmp_5_reg_593_pp0_iter1_reg <= tmp_5_reg_593;
                tmp_reg_546 <= tmp_fu_225_p2;
                tmp_reg_546_pp0_iter1_reg <= tmp_reg_546;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_reg_550_pp0_iter2_reg <= icmp_reg_550_pp0_iter1_reg;
                icmp_reg_550_pp0_iter3_reg <= icmp_reg_550_pp0_iter2_reg;
                icmp_reg_550_pp0_iter4_reg <= icmp_reg_550_pp0_iter3_reg;
                icmp_reg_550_pp0_iter5_reg <= icmp_reg_550_pp0_iter4_reg;
                icmp_reg_550_pp0_iter6_reg <= icmp_reg_550_pp0_iter5_reg;
                icmp_reg_550_pp0_iter7_reg <= icmp_reg_550_pp0_iter6_reg;
                p_Val2_3_reg_679_pp0_iter5_reg <= p_Val2_3_reg_679;
                p_Val2_3_reg_679_pp0_iter6_reg <= p_Val2_3_reg_679_pp0_iter5_reg;
                p_Val2_5_reg_649_pp0_iter2_reg <= p_Val2_5_reg_649;
                p_Val2_5_reg_649_pp0_iter3_reg <= p_Val2_5_reg_649_pp0_iter2_reg;
                p_Val2_5_reg_649_pp0_iter4_reg <= p_Val2_5_reg_649_pp0_iter3_reg;
                p_Val2_5_reg_649_pp0_iter5_reg <= p_Val2_5_reg_649_pp0_iter4_reg;
                p_Val2_5_reg_649_pp0_iter6_reg <= p_Val2_5_reg_649_pp0_iter5_reg;
                poly_coe_V_1_load_reg_639_pp0_iter2_reg <= poly_coe_V_1_load_reg_639;
                poly_coe_V_1_load_reg_639_pp0_iter3_reg <= poly_coe_V_1_load_reg_639_pp0_iter2_reg;
                poly_coe_V_2_load_reg_644_pp0_iter2_reg <= poly_coe_V_2_load_reg_644;
                poly_coe_V_2_load_reg_644_pp0_iter3_reg <= poly_coe_V_2_load_reg_644_pp0_iter2_reg;
                poly_din_abs_V_reg_625_pp0_iter2_reg <= poly_din_abs_V_reg_625;
                poly_din_abs_V_reg_625_pp0_iter3_reg <= poly_din_abs_V_reg_625_pp0_iter2_reg;
                poly_din_abs_V_reg_625_pp0_iter4_reg <= poly_din_abs_V_reg_625_pp0_iter3_reg;
                tmp_5_reg_593_pp0_iter2_reg <= tmp_5_reg_593_pp0_iter1_reg;
                tmp_5_reg_593_pp0_iter3_reg <= tmp_5_reg_593_pp0_iter2_reg;
                tmp_5_reg_593_pp0_iter4_reg <= tmp_5_reg_593_pp0_iter3_reg;
                tmp_5_reg_593_pp0_iter5_reg <= tmp_5_reg_593_pp0_iter4_reg;
                tmp_5_reg_593_pp0_iter6_reg <= tmp_5_reg_593_pp0_iter5_reg;
                tmp_reg_546_pp0_iter2_reg <= tmp_reg_546_pp0_iter1_reg;
                tmp_reg_546_pp0_iter3_reg <= tmp_reg_546_pp0_iter2_reg;
                tmp_reg_546_pp0_iter4_reg <= tmp_reg_546_pp0_iter3_reg;
                tmp_reg_546_pp0_iter5_reg <= tmp_reg_546_pp0_iter4_reg;
                tmp_reg_546_pp0_iter6_reg <= tmp_reg_546_pp0_iter5_reg;
                tmp_reg_546_pp0_iter7_reg <= tmp_reg_546_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_reg_550_pp0_iter4_reg = ap_const_lv1_1) and (tmp_reg_546_pp0_iter4_reg = ap_const_lv1_0))) then
                p_Val2_1_reg_689 <= p_Val2_1_fu_446_p2;
                p_Val2_s_reg_684 <= grp_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_reg_550_pp0_iter5_reg = ap_const_lv1_1) and (tmp_reg_546_pp0_iter5_reg = ap_const_lv1_0))) then
                p_Val2_2_reg_694 <= p_Val2_2_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_reg_550_pp0_iter3_reg = ap_const_lv1_1) and (tmp_reg_546_pp0_iter3_reg = ap_const_lv1_0))) then
                p_Val2_3_reg_679 <= p_Val2_3_fu_540_p2;
                r_V_2_reg_674 <= r_V_2_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_reg_550 = ap_const_lv1_1) and (tmp_reg_546 = ap_const_lv1_0))) then
                p_Val2_5_reg_649 <= poly_coe_V_3_q0;
                poly_coe_V_0_load_reg_634 <= poly_coe_V_0_q0;
                poly_coe_V_1_load_reg_639 <= poly_coe_V_1_q0;
                poly_coe_V_2_load_reg_644 <= poly_coe_V_2_q0;
                poly_din_abs_V_reg_625 <= poly_din_abs_V_fu_395_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_reg_550_pp0_iter6_reg = ap_const_lv1_1) and (tmp_reg_546_pp0_iter6_reg = ap_const_lv1_0))) then
                poly_temp_V_reg_699 <= poly_temp_V_fu_521_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_reg_550_pp0_iter2_reg = ap_const_lv1_1) and (tmp_reg_546_pp0_iter2_reg = ap_const_lv1_0))) then
                r_V_1_reg_659 <= r_V_1_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_reg_550_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_546_pp0_iter1_reg = ap_const_lv1_0))) then
                r_V_reg_654 <= r_V_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0))) then
                tmp_5_reg_593 <= sigm_din_V(19 downto 19);
                tmp_6_reg_599 <= tmp_6_fu_378_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OP2_V_cast3_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(poly_din_abs_V_reg_625_pp0_iter3_reg),34));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_71_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_71 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_V_phi_fu_215_p6_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, tmp_reg_546_pp0_iter7_reg, icmp_reg_550_pp0_iter7_reg, poly_temp_V_reg_699, ap_phi_reg_pp0_iter8_agg_result_V_reg_210)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_reg_550_pp0_iter7_reg = ap_const_lv1_1) and (tmp_reg_546_pp0_iter7_reg = ap_const_lv1_0))) then 
            ap_phi_mux_agg_result_V_phi_fu_215_p6 <= poly_temp_V_reg_699;
        else 
            ap_phi_mux_agg_result_V_phi_fu_215_p6 <= ap_phi_reg_pp0_iter8_agg_result_V_reg_210;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_167_p28_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_fu_225_p2, icmp_fu_241_p2, ap_phi_reg_pp0_iter0_p_0_reg_164, tmp_s_fu_247_p2, tmp_13_1_fu_253_p2, tmp_13_2_fu_259_p2, tmp_13_3_fu_265_p2, tmp_13_4_fu_271_p2, tmp_13_5_fu_277_p2, tmp_13_6_fu_283_p2, icmp4_fu_299_p2, icmp7_fu_315_p2, tmp_13_s_fu_321_p2, icmp1_fu_337_p2, tmp_13_7_fu_343_p2, tmp_13_8_fu_349_p2, p_cast_cast_fu_361_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_8_fu_349_p2 = ap_const_lv1_0) and (tmp_13_7_fu_343_p2 = ap_const_lv1_0) and (icmp1_fu_337_p2 = ap_const_lv1_0) and (tmp_13_s_fu_321_p2 = ap_const_lv1_0) and (icmp7_fu_315_p2 = ap_const_lv1_0) and (icmp4_fu_299_p2 = ap_const_lv1_0) and (tmp_13_6_fu_283_p2 = ap_const_lv1_0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= p_cast_cast_fu_361_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp4_fu_299_p2 = ap_const_lv1_1) and (tmp_13_6_fu_283_p2 = ap_const_lv1_0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp7_fu_315_p2 = ap_const_lv1_1) and (icmp4_fu_299_p2 = ap_const_lv1_0) and (tmp_13_6_fu_283_p2 = ap_const_lv1_0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_6_fu_283_p2 = ap_const_lv1_1) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_s_fu_321_p2 = ap_const_lv1_1) and (icmp7_fu_315_p2 = ap_const_lv1_0) and (icmp4_fu_299_p2 = ap_const_lv1_0) and (tmp_13_6_fu_283_p2 = ap_const_lv1_0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_1) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp1_fu_337_p2 = ap_const_lv1_1) and (tmp_13_s_fu_321_p2 = ap_const_lv1_0) and (icmp7_fu_315_p2 = ap_const_lv1_0) and (icmp4_fu_299_p2 = ap_const_lv1_0) and (tmp_13_6_fu_283_p2 = ap_const_lv1_0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_1) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_3;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_7_fu_343_p2 = ap_const_lv1_1) and (icmp1_fu_337_p2 = ap_const_lv1_0) and (tmp_13_s_fu_321_p2 = ap_const_lv1_0) and (icmp7_fu_315_p2 = ap_const_lv1_0) and (icmp4_fu_299_p2 = ap_const_lv1_0) and (tmp_13_6_fu_283_p2 = ap_const_lv1_0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_1) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_4;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_8_fu_349_p2 = ap_const_lv1_1) and (tmp_13_7_fu_343_p2 = ap_const_lv1_0) and (icmp1_fu_337_p2 = ap_const_lv1_0) and (tmp_13_s_fu_321_p2 = ap_const_lv1_0) and (icmp7_fu_315_p2 = ap_const_lv1_0) and (icmp4_fu_299_p2 = ap_const_lv1_0) and (tmp_13_6_fu_283_p2 = ap_const_lv1_0) and (tmp_13_5_fu_277_p2 = ap_const_lv1_0) and (tmp_13_4_fu_271_p2 = ap_const_lv1_0) and (tmp_13_3_fu_265_p2 = ap_const_lv1_0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_2_fu_259_p2 = ap_const_lv1_1) and (tmp_13_1_fu_253_p2 = ap_const_lv1_0) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_13_1_fu_253_p2 = ap_const_lv1_1) and (tmp_s_fu_247_p2 = ap_const_lv1_0) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_6;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_s_fu_247_p2 = ap_const_lv1_1) and (icmp_fu_241_p2 = ap_const_lv1_1) and (tmp_fu_225_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_const_lv3_7;
        else 
            ap_phi_mux_p_0_phi_fu_167_p28 <= ap_phi_reg_pp0_iter0_p_0_reg_164;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_agg_result_V_reg_210 <= "XXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_0_reg_164 <= "XXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to7)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to7 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_agg_result_V_phi_fu_215_p6;
    grp_fu_428_p1 <= grp_fu_428_p10(18 - 1 downto 0);
    grp_fu_428_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(poly_din_abs_V_reg_625_pp0_iter3_reg),65));
    icmp1_fu_337_p2 <= "1" when (signed(tmp_4_fu_327_p4) < signed(ap_const_lv4_1)) else "0";
    icmp4_fu_299_p2 <= "1" when (signed(tmp_2_fu_289_p4) < signed(ap_const_lv6_1)) else "0";
    icmp7_fu_315_p2 <= "1" when (signed(tmp_3_fu_305_p4) < signed(ap_const_lv5_1)) else "0";
    icmp_fu_241_p2 <= "1" when (signed(tmp_1_fu_231_p4) < signed(ap_const_lv3_1)) else "0";
    p_Val2_1_fu_446_p0 <= r_V_2_reg_674;
    p_Val2_1_fu_446_p1 <= p_Val2_1_fu_446_p10(18 - 1 downto 0);
    p_Val2_1_fu_446_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(poly_din_abs_V_reg_625_pp0_iter4_reg),50));
    p_Val2_1_fu_446_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_446_p0) * signed('0' &p_Val2_1_fu_446_p1))), 50));
    p_Val2_2_fu_463_p2 <= std_logic_vector(signed(tmp_2_i_i_cast_fu_459_p1) + signed(p_Val2_s_reg_684));
    p_Val2_3_fu_540_p0 <= p_Val2_3_fu_540_p00(17 - 1 downto 0);
    p_Val2_3_fu_540_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(poly_coe_V_2_load_reg_644_pp0_iter3_reg),34));
    p_Val2_3_fu_540_p1 <= OP2_V_cast3_fu_419_p1(18 - 1 downto 0);
    p_Val2_4_fu_482_p2 <= std_logic_vector(unsigned(tmp_5_i_i_cast_cast_fu_478_p1) + unsigned(tmp_3_i_i_cast_fu_468_p1));
    p_Val2_6_fu_499_p2 <= std_logic_vector(unsigned(tmp_8_i_i_cast_cast_fu_495_p1) + unsigned(p_Val2_4_fu_482_p2));
    p_Val2_9_i_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv20_40000) - unsigned(poly_eq_dout_V_fu_505_p4));
    p_cast_cast_fu_361_p3 <= 
        ap_const_lv3_6 when (tmp_13_9_fu_355_p2(0) = '1') else 
        ap_const_lv3_7;
    poly_coe_V_0_address0 <= tmp_i_i_fu_382_p1(3 - 1 downto 0);

    poly_coe_V_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            poly_coe_V_0_ce0 <= ap_const_logic_1;
        else 
            poly_coe_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    poly_coe_V_1_address0 <= tmp_i_i_fu_382_p1(3 - 1 downto 0);

    poly_coe_V_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            poly_coe_V_1_ce0 <= ap_const_logic_1;
        else 
            poly_coe_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    poly_coe_V_2_address0 <= tmp_i_i_fu_382_p1(3 - 1 downto 0);

    poly_coe_V_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            poly_coe_V_2_ce0 <= ap_const_logic_1;
        else 
            poly_coe_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    poly_coe_V_3_address0 <= tmp_i_i_fu_382_p1(3 - 1 downto 0);

    poly_coe_V_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            poly_coe_V_3_ce0 <= ap_const_logic_1;
        else 
            poly_coe_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    poly_din_abs_V_cast_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(tmp_6_reg_599));
    poly_din_abs_V_fu_395_p3 <= 
        poly_din_abs_V_cast_fu_390_p2 when (tmp_5_reg_593(0) = '1') else 
        tmp_6_reg_599;
    poly_eq_dout_V_fu_505_p4 <= p_Val2_6_fu_499_p2(61 downto 42);
    poly_temp_V_fu_521_p3 <= 
        p_Val2_9_i_fu_515_p2 when (tmp_5_reg_593_pp0_iter6_reg(0) = '1') else 
        poly_eq_dout_V_fu_505_p4;
    r_V_1_fu_413_p0 <= r_V_reg_654;
    r_V_1_fu_413_p1 <= r_V_1_fu_413_p10(18 - 1 downto 0);
    r_V_1_fu_413_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(poly_din_abs_V_reg_625_pp0_iter2_reg),48));
    r_V_1_fu_413_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_fu_413_p0) * signed('0' &r_V_1_fu_413_p1))), 48));
    r_V_2_fu_534_p1 <= OP2_V_cast3_fu_419_p1(18 - 1 downto 0);
    r_V_fu_528_p0 <= r_V_fu_528_p00(18 - 1 downto 0);
    r_V_fu_528_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(poly_din_abs_V_reg_625),32));
    tmp_13_1_fu_253_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_E8000)) else "0";
    tmp_13_2_fu_259_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_EC000)) else "0";
    tmp_13_3_fu_265_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_F0000)) else "0";
    tmp_13_4_fu_271_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_F4000)) else "0";
    tmp_13_5_fu_277_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_F8000)) else "0";
    tmp_13_6_fu_283_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_FC000)) else "0";
    tmp_13_7_fu_343_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_14000)) else "0";
    tmp_13_8_fu_349_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_18000)) else "0";
    tmp_13_9_fu_355_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_1C000)) else "0";
    tmp_13_s_fu_321_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_C000)) else "0";
    tmp_1_fu_231_p4 <= sigm_din_V(19 downto 17);
    tmp_2_fu_289_p4 <= sigm_din_V(19 downto 14);
        tmp_2_i_i_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_i_i_fu_452_p3),65));

    tmp_2_i_i_fu_452_p3 <= (p_Val2_1_reg_689 & ap_const_lv14_0);
    tmp_3_fu_305_p4 <= sigm_din_V(19 downto 15);
    tmp_3_i_i_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_reg_694),66));
    tmp_4_fu_327_p4 <= sigm_din_V(19 downto 16);
    tmp_5_i_i_cast_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_i_i_fu_471_p3),66));
    tmp_5_i_i_fu_471_p3 <= (p_Val2_3_reg_679_pp0_iter6_reg & ap_const_lv28_0);
    tmp_6_fu_378_p1 <= sigm_din_V(18 - 1 downto 0);
    tmp_8_i_i_cast_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_i_i_fu_488_p3),66));
    tmp_8_i_i_fu_488_p3 <= (p_Val2_5_reg_649_pp0_iter6_reg & ap_const_lv42_0);
    tmp_fu_225_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_E0000)) else "0";
    tmp_i_i_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_phi_fu_167_p28),64));
    tmp_s_fu_247_p2 <= "1" when (signed(sigm_din_V) < signed(ap_const_lv20_E4000)) else "0";
end behav;
