-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bpnn is
generic (
    C_S_AXI_CTRLS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRLS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRLS_AWVALID : IN STD_LOGIC;
    s_axi_CTRLS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRLS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRLS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRLS_WVALID : IN STD_LOGIC;
    s_axi_CTRLS_WREADY : OUT STD_LOGIC;
    s_axi_CTRLS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRLS_DATA_WIDTH-1 downto 0);
    s_axi_CTRLS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRLS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRLS_ARVALID : IN STD_LOGIC;
    s_axi_CTRLS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRLS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRLS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRLS_RVALID : OUT STD_LOGIC;
    s_axi_CTRLS_RREADY : IN STD_LOGIC;
    s_axi_CTRLS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRLS_DATA_WIDTH-1 downto 0);
    s_axi_CTRLS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRLS_BVALID : OUT STD_LOGIC;
    s_axi_CTRLS_BREADY : IN STD_LOGIC;
    s_axi_CTRLS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bpnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bpnn,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.957125,HLS_SYN_LAT=111,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=47,HLS_SYN_FF=7652,HLS_SYN_LUT=9239,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal Thu : STD_LOGIC_VECTOR (31 downto 0);
    signal Ind : STD_LOGIC_VECTOR (31 downto 0);
    signal Mid : STD_LOGIC_VECTOR (31 downto 0);
    signal Rin : STD_LOGIC_VECTOR (31 downto 0);
    signal Lit : STD_LOGIC_VECTOR (31 downto 0);
    signal ACC_X : STD_LOGIC_VECTOR (31 downto 0);
    signal ACC_Y : STD_LOGIC_VECTOR (31 downto 0);
    signal ACC_Z : STD_LOGIC_VECTOR (31 downto 0);
    signal iw_V_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_0_ce0 : STD_LOGIC;
    signal iw_V_0_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_1_ce0 : STD_LOGIC;
    signal iw_V_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_2_ce0 : STD_LOGIC;
    signal iw_V_2_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_3_ce0 : STD_LOGIC;
    signal iw_V_3_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_4_ce0 : STD_LOGIC;
    signal iw_V_4_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_5_ce0 : STD_LOGIC;
    signal iw_V_5_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_6_ce0 : STD_LOGIC;
    signal iw_V_6_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iw_V_7_ce0 : STD_LOGIC;
    signal iw_V_7_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal hid1_b_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_b_V_ce0 : STD_LOGIC;
    signal hid1_b_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_0_ce0 : STD_LOGIC;
    signal lw_V_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_1_ce0 : STD_LOGIC;
    signal lw_V_1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_2_ce0 : STD_LOGIC;
    signal lw_V_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lw_V_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_3_ce0 : STD_LOGIC;
    signal lw_V_3_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_4_ce0 : STD_LOGIC;
    signal lw_V_4_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_5_ce0 : STD_LOGIC;
    signal lw_V_5_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_6_ce0 : STD_LOGIC;
    signal lw_V_6_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_7_ce0 : STD_LOGIC;
    signal lw_V_7_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_8_ce0 : STD_LOGIC;
    signal lw_V_8_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_9_ce0 : STD_LOGIC;
    signal lw_V_9_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_10_ce0 : STD_LOGIC;
    signal lw_V_10_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lw_V_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_11_ce0 : STD_LOGIC;
    signal lw_V_11_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_12_ce0 : STD_LOGIC;
    signal lw_V_12_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_13_ce0 : STD_LOGIC;
    signal lw_V_13_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_14_ce0 : STD_LOGIC;
    signal lw_V_14_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lw_V_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_15_ce0 : STD_LOGIC;
    signal lw_V_15_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_16_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_16_ce0 : STD_LOGIC;
    signal lw_V_16_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_17_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_17_ce0 : STD_LOGIC;
    signal lw_V_17_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_18_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_18_ce0 : STD_LOGIC;
    signal lw_V_18_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_19_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_19_ce0 : STD_LOGIC;
    signal lw_V_19_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal output_b_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_b_V_ce0 : STD_LOGIC;
    signal output_b_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_1207 : STD_LOGIC_VECTOR (4 downto 0);
    signal i1_reg_1218 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ACC_Z_read_reg_4515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ACC_Y_read_reg_4520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ACC_X_read_reg_4525 : STD_LOGIC_VECTOR (31 downto 0);
    signal Lit_read_reg_4530 : STD_LOGIC_VECTOR (31 downto 0);
    signal Rin_read_reg_4535 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mid_read_reg_4540 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ind_read_reg_4545 : STD_LOGIC_VECTOR (31 downto 0);
    signal Thu_read_reg_4550 : STD_LOGIC_VECTOR (31 downto 0);
    signal isneg_reg_4565 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exp_tmp_V_reg_4571 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_1329_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_23_reg_4576 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_9_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_4581 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_reg_4587 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_1_reg_4593 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_1365_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_55_reg_4598 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_24_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_4603 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_reg_4609 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_2_reg_4615 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_87_fu_1401_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_87_reg_4620 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_40_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_4625 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_3_reg_4631 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_3_reg_4637 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_119_fu_1437_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_119_reg_4642 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_54_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_4647 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_4_reg_4653 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_4_reg_4659 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_178_fu_1473_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_178_reg_4664 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_70_fu_1477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_reg_4669 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_5_reg_4675 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_5_reg_4681 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_184_fu_1509_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_184_reg_4686 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_85_fu_1513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_reg_4691 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_6_reg_4697 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_6_reg_4703 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_190_fu_1545_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_190_reg_4708 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_101_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_reg_4713 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_7_reg_4719 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_7_reg_4725 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_196_fu_1581_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_196_reg_4730 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_116_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_reg_4735 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_1611_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_4751 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_10_fu_1624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_4756 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_1642_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_4762 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_1650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_4769 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1656_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_30_reg_4775 : STD_LOGIC_VECTOR (19 downto 0);
    signal man_V_5_fu_1680_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_5_reg_4781 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_25_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_4786 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_1711_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_4792 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_1719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_4799 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_1725_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_62_reg_4805 : STD_LOGIC_VECTOR (19 downto 0);
    signal man_V_8_fu_1749_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_8_reg_4811 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_41_fu_1762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_4816 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_1780_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_reg_4822 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_fu_1788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_4829 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1794_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_94_reg_4835 : STD_LOGIC_VECTOR (19 downto 0);
    signal man_V_11_fu_1818_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_11_reg_4841 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_56_fu_1831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_4846 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_1849_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_3_reg_4852 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_59_fu_1857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_4859 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_fu_1863_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_126_reg_4865 : STD_LOGIC_VECTOR (19 downto 0);
    signal man_V_14_fu_1887_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_14_reg_4871 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_72_fu_1900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_reg_4876 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_4_fu_1918_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_4_reg_4882 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_75_fu_1926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_reg_4889 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_1932_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_179_reg_4895 : STD_LOGIC_VECTOR (19 downto 0);
    signal man_V_17_fu_1956_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_17_reg_4901 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_86_fu_1969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_reg_4906 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_5_fu_1987_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_5_reg_4912 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_90_fu_1995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_reg_4919 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_185_fu_2001_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_185_reg_4925 : STD_LOGIC_VECTOR (19 downto 0);
    signal man_V_20_fu_2025_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_20_reg_4931 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_102_fu_2038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_reg_4936 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_6_fu_2056_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_6_reg_4942 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_106_fu_2064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_reg_4949 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_fu_2070_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_191_reg_4955 : STD_LOGIC_VECTOR (19 downto 0);
    signal man_V_23_fu_2094_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_23_reg_4961 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_117_fu_2107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_reg_4966 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_7_fu_2125_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_7_reg_4972 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_121_fu_2133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_reg_4979 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_197_fu_2139_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_197_reg_4985 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal OP1_V_cast_fu_3383_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_cast_reg_5011 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_1_cast_fu_3387_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_1_cast_reg_5016 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_2_cast_fu_3391_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_2_cast_reg_5021 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_3_cast_fu_3395_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_3_cast_reg_5026 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_4_cast_fu_3399_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_4_cast_reg_5031 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_5_cast_fu_3403_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_5_cast_reg_5036 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_cast_15_fu_3407_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_cast_15_reg_5041 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_7_cast_fu_3411_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_7_cast_reg_5046 : STD_LOGIC_VECTOR (36 downto 0);
    signal exitcond1_fu_3415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond1_reg_5051_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_5051_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_3421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_130_fu_3427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_reg_5060_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal iw_V_0_load_reg_5083 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_1_load_reg_5088 : STD_LOGIC_VECTOR (18 downto 0);
    signal hid1_trans_din_V_add_20_reg_5108 : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_trans_din_V_add_20_reg_5108_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_trans_din_V_add_20_reg_5108_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_trans_din_V_add_20_reg_5108_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_s_fu_4251_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_s_reg_5114 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_1_fu_4256_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_1_reg_5119 : STD_LOGIC_VECTOR (36 downto 0);
    signal iw_V_2_load_reg_5124 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_3_load_reg_5129 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_4_load_reg_5134 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_43_2_fu_4261_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_2_reg_5149 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_134_reg_5154 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_3_fu_4266_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_3_reg_5159 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_4_fu_4271_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_4_reg_5164 : STD_LOGIC_VECTOR (36 downto 0);
    signal iw_V_5_load_reg_5169 : STD_LOGIC_VECTOR (18 downto 0);
    signal iw_V_6_load_reg_5174 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_43_5_fu_4276_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_5_reg_5184 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_138_reg_5189 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_6_fu_4281_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_43_6_reg_5194 : STD_LOGIC_VECTOR (36 downto 0);
    signal iw_V_7_load_reg_5199 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_145_reg_5209 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_15_reg_5214 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_reg_5219 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal hid1_out_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_1_reg_5224 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_2_reg_5229 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal hid1_out_V_load_3_reg_5234 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_4_reg_5239 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal hid1_out_V_load_5_reg_5244 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_6_reg_5249 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal hid1_out_V_load_7_reg_5254 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_8_reg_5259 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal hid1_out_V_load_9_reg_5264 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_10_reg_5269 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal hid1_out_V_load_11_reg_5274 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_12_reg_5279 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal hid1_out_V_load_13_reg_5284 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_14_reg_5289 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal hid1_out_V_load_15_reg_5294 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_load_16_reg_5299 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal hid1_out_V_load_17_reg_5304 : STD_LOGIC_VECTOR (19 downto 0);
    signal OP1_V_6_cast_cast_fu_3661_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_cast_cast_reg_5309 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal OP1_V_6_1_cast_cast_fu_3664_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_1_cast_cast_reg_5314 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_2_cast_cast_fu_3667_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal OP1_V_6_2_cast_cast_reg_5319 : STD_LOGIC_VECTOR (35 downto 0);
    signal OP1_V_6_3_cast_cast_fu_3670_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_3_cast_cast_reg_5324 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_4_cast_cast_fu_3673_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_4_cast_cast_reg_5329 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_5_cast_cast_fu_3676_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_5_cast_cast_reg_5334 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_6_cast_cast_fu_3679_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_6_cast_cast_reg_5339 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_7_cast_cast_fu_3682_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_7_cast_cast_reg_5344 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_8_cast_cast_fu_3685_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_8_cast_cast_reg_5349 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_9_cast_cast_fu_3688_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_9_cast_cast_reg_5354 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_cast_cast_16_fu_3691_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal OP1_V_6_cast_cast_16_reg_5359 : STD_LOGIC_VECTOR (35 downto 0);
    signal OP1_V_6_10_cast_cast_fu_3694_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_10_cast_cast_reg_5364 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_11_cast_cast_fu_3697_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_11_cast_cast_reg_5369 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_12_cast_cast_fu_3700_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_12_cast_cast_reg_5374 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_13_cast_cast_fu_3703_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal OP1_V_6_13_cast_cast_reg_5379 : STD_LOGIC_VECTOR (35 downto 0);
    signal OP1_V_6_14_cast_cast_fu_3706_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_14_cast_cast_reg_5384 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_15_cast_cast_fu_3709_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_15_cast_cast_reg_5389 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_16_cast_cast_fu_3712_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_16_cast_cast_reg_5394 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_17_cast_cast_fu_3715_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_17_cast_cast_reg_5399 : STD_LOGIC_VECTOR (37 downto 0);
    signal OP1_V_6_18_cast_cast_fu_3719_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP1_V_6_18_cast_cast_reg_5404 : STD_LOGIC_VECTOR (36 downto 0);
    signal exitcond2_fu_3723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state37_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond2_reg_5409_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_5409_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_3729_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_143_fu_3735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_reg_5418_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal out_trans_din_V_addr_14_reg_5453 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_addr_14_reg_5453_pp1_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lw_V_0_load_reg_5459 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_1_load_reg_5464 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_2_load_reg_5479 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_149_reg_5484 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_3_load_reg_5489 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_4_load_reg_5504 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_153_reg_5509 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_5_load_reg_5514 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_6_load_reg_5529 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_155_reg_5534 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_7_load_reg_5539 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_8_load_reg_5554 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_157_reg_5559 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_9_load_reg_5564 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_10_load_reg_5579 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_159_reg_5584 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_11_load_reg_5589 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_12_load_reg_5604 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_161_reg_5609 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_13_load_reg_5614 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_14_load_reg_5629 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_163_reg_5634 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_15_load_reg_5639 : STD_LOGIC_VECTOR (16 downto 0);
    signal lw_V_16_load_reg_5654 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_165_reg_5659 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_17_load_reg_5664 : STD_LOGIC_VECTOR (17 downto 0);
    signal lw_V_18_load_reg_5674 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_167_reg_5679 : STD_LOGIC_VECTOR (19 downto 0);
    signal lw_V_19_load_reg_5689 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_168_reg_5694 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_3_fu_4208_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_5707 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal exitcond_i_fu_4202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_V_i_0_i_fu_4235_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal index_2_i_index_i_fu_4243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state37 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal output_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_trans_din_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_trans_din_V_ce0 : STD_LOGIC;
    signal hid1_trans_din_V_we0 : STD_LOGIC;
    signal hid1_trans_din_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_trans_din_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_trans_din_V_ce1 : STD_LOGIC;
    signal hid1_trans_din_V_we1 : STD_LOGIC;
    signal hid1_trans_din_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal out_trans_din_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_ce0 : STD_LOGIC;
    signal out_trans_din_V_we0 : STD_LOGIC;
    signal out_trans_din_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal out_trans_din_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_trans_din_V_ce1 : STD_LOGIC;
    signal out_trans_din_V_we1 : STD_LOGIC;
    signal out_trans_din_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_out_V_ce0 : STD_LOGIC;
    signal hid1_out_V_we0 : STD_LOGIC;
    signal hid1_out_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal hid1_out_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal hid1_out_V_ce1 : STD_LOGIC;
    signal hid1_out_V_we1 : STD_LOGIC;
    signal grp_sigmoid_f_fu_1265_ap_start : STD_LOGIC;
    signal grp_sigmoid_f_fu_1265_ap_done : STD_LOGIC;
    signal grp_sigmoid_f_fu_1265_ap_idle : STD_LOGIC;
    signal grp_sigmoid_f_fu_1265_ap_ready : STD_LOGIC;
    signal grp_sigmoid_f_fu_1265_sigm_din_V : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_sigmoid_f_fu_1265_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal p_0_i_reg_1229 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i_i_reg_1241 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_reg_1253 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sigmoid_f_fu_1265_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_i_fu_4214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal d_assign_fu_1300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_1303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1307_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_assign_1_fu_1288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_1_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_1343_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_assign_2_fu_1294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_2_fu_1375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_1379_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_assign_3_fu_1297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_3_fu_1411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_110_fu_1415_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_assign_4_fu_1291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_4_fu_1447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_fu_1451_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_assign_5_fu_1279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_5_fu_1483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_182_fu_1487_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_assign_6_fu_1282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_6_fu_1519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_188_fu_1523_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal d_assign_7_fu_1285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_7_fu_1555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_194_fu_1559_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_1594_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_s_fu_1601_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_1605_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_s_fu_1591_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_1618_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_1630_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_1636_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_1663_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_1_fu_1670_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_fu_1674_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_22_fu_1660_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_1687_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_1699_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_1705_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_1732_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_2_fu_1739_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_7_fu_1743_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_38_fu_1729_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_1756_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_fu_1768_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_fu_1774_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_1801_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_3_fu_1808_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_10_fu_1812_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_53_fu_1798_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_3_fu_1825_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_fu_1837_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_58_fu_1843_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_1870_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_4_fu_1877_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_13_fu_1881_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_69_fu_1867_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_4_fu_1894_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_fu_1906_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_74_fu_1912_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_1939_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_5_fu_1946_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_16_fu_1950_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_84_fu_1936_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_5_fu_1963_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_fu_1975_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_fu_1981_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_2008_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_6_fu_2015_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_19_fu_2019_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_100_fu_2005_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_6_fu_2032_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_104_fu_2044_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_105_fu_2050_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_2077_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_7_fu_2084_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_22_fu_2088_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_115_fu_2074_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_7_fu_2101_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_118_fu_2113_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_120_fu_2119_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_cast_fu_2143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_2156_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_18_fu_2160_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_20_fu_2176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_2179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_2189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_2199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_2203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_2146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_2209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_2214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_demorgan_fu_2232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_2151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_2237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_2243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_2185_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_35_fu_2165_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp_fu_2226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_2220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_2169_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp2_fu_2194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_2257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_2249_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel1_fu_2263_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond1_fu_2270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_2284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel2_fu_2276_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sh_amt_1_cast_fu_2298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_2311_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_33_fu_2315_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_36_fu_2331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_2334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_2344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp30_demorgan_fu_2354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_2358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_2301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_2364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_2369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp45_demorgan_fu_2387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_2306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_2392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_2398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_2340_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_67_fu_2320_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp15_fu_2381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_2375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_2324_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp10_fu_2349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_2412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_2404_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel5_fu_2418_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond4_fu_2425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_2439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel6_fu_2431_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sh_amt_2_cast_fu_2453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_2466_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_49_fu_2470_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_51_fu_2486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_2489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp18_fu_2499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp54_demorgan_fu_2509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_2513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_2456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp21_fu_2519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp22_fu_2524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp69_demorgan_fu_2542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_2461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp25_fu_2547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp26_fu_2553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_2495_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_99_fu_2475_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp24_fu_2536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp23_fu_2530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_2479_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp19_fu_2504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_2567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel8_fu_2559_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel9_fu_2573_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond7_fu_2580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_2594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_2586_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sh_amt_3_cast_fu_2608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_2621_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_64_fu_2625_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_66_fu_2641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_2644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp27_fu_2654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp78_demorgan_fu_2664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp29_fu_2668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_2611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp30_fu_2674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp31_fu_2679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp93_demorgan_fu_2697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_2616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp34_fu_2702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp35_fu_2708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_fu_2650_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_131_fu_2630_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp33_fu_2691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp32_fu_2685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_2634_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp28_fu_2659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_fu_2722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel7_fu_2714_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel10_fu_2728_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond10_fu_2735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond11_fu_2749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel11_fu_2741_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sh_amt_4_cast_fu_2763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_2776_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_80_fu_2780_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_82_fu_2796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_2799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp36_fu_2809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp102_demorgan_fu_2819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp38_fu_2823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_2766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp39_fu_2829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp40_fu_2834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp117_demorgan_fu_2852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_2771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp43_fu_2857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp44_fu_2863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_181_fu_2805_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_180_fu_2785_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp42_fu_2846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp41_fu_2840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_2789_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp37_fu_2814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond12_fu_2877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel12_fu_2869_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel13_fu_2883_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond13_fu_2890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond14_fu_2904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel14_fu_2896_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sh_amt_5_cast_fu_2918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_2931_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_95_fu_2935_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_97_fu_2951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_2954_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp45_fu_2964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp126_demorgan_fu_2974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp47_fu_2978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_2921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp48_fu_2984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp49_fu_2989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp141_demorgan_fu_3007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_2926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp52_fu_3012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp53_fu_3018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_187_fu_2960_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_186_fu_2940_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp51_fu_3001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp50_fu_2995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_2944_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp46_fu_2969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond15_fu_3032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel15_fu_3024_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel16_fu_3038_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond16_fu_3045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond17_fu_3059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel17_fu_3051_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sh_amt_6_cast_fu_3073_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_fu_3086_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_111_fu_3090_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_113_fu_3106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_fu_3109_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp54_fu_3119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp150_demorgan_fu_3129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp56_fu_3133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_3076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp57_fu_3139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp58_fu_3144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp165_demorgan_fu_3162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_3081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp61_fu_3167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp62_fu_3173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_193_fu_3115_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_192_fu_3095_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp60_fu_3156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp59_fu_3150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_3099_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp55_fu_3124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond18_fu_3187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel18_fu_3179_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel19_fu_3193_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond19_fu_3200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond20_fu_3214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel20_fu_3206_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sh_amt_7_cast_fu_3228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_fu_3241_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_125_fu_3245_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_128_fu_3261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_fu_3264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp63_fu_3274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp174_demorgan_fu_3284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp65_fu_3288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_3231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp66_fu_3294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp67_fu_3299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp189_demorgan_fu_3317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_123_fu_3236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp70_fu_3322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp71_fu_3328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_199_fu_3270_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_198_fu_3250_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp69_fu_3311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp68_fu_3305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_fu_3254_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp64_fu_3279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond21_fu_3342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel21_fu_3334_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel22_fu_3348_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond22_fu_3355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond23_fu_3369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel23_fu_3361_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_0_V_fu_2290_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_1_V_fu_2445_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_2_V_fu_2600_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_3_V_fu_2755_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_4_V_fu_2910_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_5_V_fu_3065_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_6_V_fu_3220_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal input_7_V_fu_3375_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_132_fu_3439_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_1_fu_3447_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_Val2_1_fu_3447_p2 : signal is "no";
    signal tmp_133_fu_3452_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_201_1_fu_3462_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_44_1_fu_3470_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 of p_Val2_44_1_fu_3470_p2 : signal is "no";
    signal tmp_201_2_fu_3494_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_44_2_fu_3501_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 of p_Val2_44_2_fu_3501_p2 : signal is "no";
    signal tmp_136_fu_3506_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_201_3_fu_3516_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_44_3_fu_3524_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 of p_Val2_44_3_fu_3524_p2 : signal is "no";
    signal tmp_137_fu_3529_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_201_4_fu_3539_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_44_4_fu_3547_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 of p_Val2_44_4_fu_3547_p2 : signal is "no";
    signal tmp_201_5_fu_3568_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_44_5_fu_3575_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 of p_Val2_44_5_fu_3575_p2 : signal is "no";
    signal tmp_139_fu_3580_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_201_6_fu_3590_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_44_6_fu_3598_p2 : STD_LOGIC_VECTOR (36 downto 0);
    attribute use_dsp48 of p_Val2_44_6_fu_3598_p2 : signal is "no";
    signal tmp_141_fu_3606_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4286_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_140_fu_3633_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_164_cast_fu_3640_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_3_fu_3643_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_4294_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_146_fu_3755_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4302_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4310_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_152_fu_3794_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4318_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4326_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_154_fu_3833_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4334_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4342_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_156_fu_3872_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4350_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4358_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_158_fu_3911_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4366_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4374_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_160_fu_3950_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4382_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4390_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_162_fu_3989_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4398_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4406_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_164_fu_4028_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4414_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4422_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_166_fu_4067_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4430_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4438_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4446_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_169_fu_4122_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_170_cast_fu_4139_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_170_fu_4143_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_170_cast_fu_4139_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_147_fu_4131_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_7_fu_4160_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_148_fu_4152_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_150_fu_4177_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_150_fu_4177_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_171_fu_4183_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal index_1_fu_4225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_23_fu_4219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_cast_fu_4231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_4251_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_1_fu_4256_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_2_fu_4261_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_3_fu_4266_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_4_fu_4271_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_5_fu_4276_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_43_6_fu_4281_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4286_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4286_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_4294_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4294_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4302_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4302_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4310_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4310_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4318_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4318_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4326_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4326_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4334_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4334_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4342_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4342_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4350_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4350_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4358_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4358_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4366_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4366_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4374_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4374_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4382_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4382_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4390_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4390_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4398_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4398_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4406_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4406_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4414_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4414_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4422_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4422_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4430_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4430_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4438_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4438_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_4446_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_4446_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component sigmoid_f IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sigm_din_V : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bpnn_fpext_32ns_6lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bpnn_mul_mul_20s_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component bpnn_mac_muladd_2ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (36 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component bpnn_mac_muladd_1ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (38 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component bpnn_mac_muladd_1pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (38 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component bpnn_mac_muladd_1qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (38 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component bpnn_iw_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bpnn_iw_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bpnn_iw_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bpnn_iw_V_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bpnn_iw_V_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bpnn_iw_V_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bpnn_iw_V_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bpnn_iw_V_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_hid1_b_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bpnn_lw_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bpnn_lw_V_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bpnn_lw_V_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_13 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_14 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bpnn_lw_V_15 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_lw_V_17 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_18 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component bpnn_lw_V_19 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bpnn_output_b_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bpnn_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bpnn_hid1_trans_djbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bpnn_out_trans_dikbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bpnn_hid1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bpnn_CTRLS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        Thu : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ind : OUT STD_LOGIC_VECTOR (31 downto 0);
        Mid : OUT STD_LOGIC_VECTOR (31 downto 0);
        Rin : OUT STD_LOGIC_VECTOR (31 downto 0);
        Lit : OUT STD_LOGIC_VECTOR (31 downto 0);
        ACC_X : OUT STD_LOGIC_VECTOR (31 downto 0);
        ACC_Y : OUT STD_LOGIC_VECTOR (31 downto 0);
        ACC_Z : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    iw_V_0_U : component bpnn_iw_V_0
    generic map (
        DataWidth => 19,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_0_address0,
        ce0 => iw_V_0_ce0,
        q0 => iw_V_0_q0);

    iw_V_1_U : component bpnn_iw_V_1
    generic map (
        DataWidth => 19,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_1_address0,
        ce0 => iw_V_1_ce0,
        q0 => iw_V_1_q0);

    iw_V_2_U : component bpnn_iw_V_2
    generic map (
        DataWidth => 19,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_2_address0,
        ce0 => iw_V_2_ce0,
        q0 => iw_V_2_q0);

    iw_V_3_U : component bpnn_iw_V_3
    generic map (
        DataWidth => 19,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_3_address0,
        ce0 => iw_V_3_ce0,
        q0 => iw_V_3_q0);

    iw_V_4_U : component bpnn_iw_V_4
    generic map (
        DataWidth => 19,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_4_address0,
        ce0 => iw_V_4_ce0,
        q0 => iw_V_4_q0);

    iw_V_5_U : component bpnn_iw_V_5
    generic map (
        DataWidth => 19,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_5_address0,
        ce0 => iw_V_5_ce0,
        q0 => iw_V_5_q0);

    iw_V_6_U : component bpnn_iw_V_6
    generic map (
        DataWidth => 19,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_6_address0,
        ce0 => iw_V_6_ce0,
        q0 => iw_V_6_q0);

    iw_V_7_U : component bpnn_iw_V_7
    generic map (
        DataWidth => 18,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => iw_V_7_address0,
        ce0 => iw_V_7_ce0,
        q0 => iw_V_7_q0);

    hid1_b_V_U : component bpnn_hid1_b_V
    generic map (
        DataWidth => 20,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hid1_b_V_address0,
        ce0 => hid1_b_V_ce0,
        q0 => hid1_b_V_q0);

    lw_V_0_U : component bpnn_lw_V_0
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_0_address0,
        ce0 => lw_V_0_ce0,
        q0 => lw_V_0_q0);

    lw_V_1_U : component bpnn_lw_V_1
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_1_address0,
        ce0 => lw_V_1_ce0,
        q0 => lw_V_1_q0);

    lw_V_2_U : component bpnn_lw_V_2
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_2_address0,
        ce0 => lw_V_2_ce0,
        q0 => lw_V_2_q0);

    lw_V_3_U : component bpnn_lw_V_3
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_3_address0,
        ce0 => lw_V_3_ce0,
        q0 => lw_V_3_q0);

    lw_V_4_U : component bpnn_lw_V_4
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_4_address0,
        ce0 => lw_V_4_ce0,
        q0 => lw_V_4_q0);

    lw_V_5_U : component bpnn_lw_V_5
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_5_address0,
        ce0 => lw_V_5_ce0,
        q0 => lw_V_5_q0);

    lw_V_6_U : component bpnn_lw_V_6
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_6_address0,
        ce0 => lw_V_6_ce0,
        q0 => lw_V_6_q0);

    lw_V_7_U : component bpnn_lw_V_7
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_7_address0,
        ce0 => lw_V_7_ce0,
        q0 => lw_V_7_q0);

    lw_V_8_U : component bpnn_lw_V_8
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_8_address0,
        ce0 => lw_V_8_ce0,
        q0 => lw_V_8_q0);

    lw_V_9_U : component bpnn_lw_V_9
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_9_address0,
        ce0 => lw_V_9_ce0,
        q0 => lw_V_9_q0);

    lw_V_10_U : component bpnn_lw_V_10
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_10_address0,
        ce0 => lw_V_10_ce0,
        q0 => lw_V_10_q0);

    lw_V_11_U : component bpnn_lw_V_11
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_11_address0,
        ce0 => lw_V_11_ce0,
        q0 => lw_V_11_q0);

    lw_V_12_U : component bpnn_lw_V_12
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_12_address0,
        ce0 => lw_V_12_ce0,
        q0 => lw_V_12_q0);

    lw_V_13_U : component bpnn_lw_V_13
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_13_address0,
        ce0 => lw_V_13_ce0,
        q0 => lw_V_13_q0);

    lw_V_14_U : component bpnn_lw_V_14
    generic map (
        DataWidth => 16,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_14_address0,
        ce0 => lw_V_14_ce0,
        q0 => lw_V_14_q0);

    lw_V_15_U : component bpnn_lw_V_15
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_15_address0,
        ce0 => lw_V_15_ce0,
        q0 => lw_V_15_q0);

    lw_V_16_U : component bpnn_lw_V_16
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_16_address0,
        ce0 => lw_V_16_ce0,
        q0 => lw_V_16_q0);

    lw_V_17_U : component bpnn_lw_V_17
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_17_address0,
        ce0 => lw_V_17_ce0,
        q0 => lw_V_17_q0);

    lw_V_18_U : component bpnn_lw_V_18
    generic map (
        DataWidth => 18,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_18_address0,
        ce0 => lw_V_18_ce0,
        q0 => lw_V_18_q0);

    lw_V_19_U : component bpnn_lw_V_19
    generic map (
        DataWidth => 17,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lw_V_19_address0,
        ce0 => lw_V_19_ce0,
        q0 => lw_V_19_q0);

    output_b_V_U : component bpnn_output_b_V
    generic map (
        DataWidth => 20,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_b_V_address0,
        ce0 => output_b_V_ce0,
        q0 => output_b_V_q0);

    bpnn_CTRLS_s_axi_U : component bpnn_CTRLS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRLS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRLS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRLS_AWVALID,
        AWREADY => s_axi_CTRLS_AWREADY,
        AWADDR => s_axi_CTRLS_AWADDR,
        WVALID => s_axi_CTRLS_WVALID,
        WREADY => s_axi_CTRLS_WREADY,
        WDATA => s_axi_CTRLS_WDATA,
        WSTRB => s_axi_CTRLS_WSTRB,
        ARVALID => s_axi_CTRLS_ARVALID,
        ARREADY => s_axi_CTRLS_ARREADY,
        ARADDR => s_axi_CTRLS_ARADDR,
        RVALID => s_axi_CTRLS_RVALID,
        RREADY => s_axi_CTRLS_RREADY,
        RDATA => s_axi_CTRLS_RDATA,
        RRESP => s_axi_CTRLS_RRESP,
        BVALID => s_axi_CTRLS_BVALID,
        BREADY => s_axi_CTRLS_BREADY,
        BRESP => s_axi_CTRLS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        Thu => Thu,
        Ind => Ind,
        Mid => Mid,
        Rin => Rin,
        Lit => Lit,
        ACC_X => ACC_X,
        ACC_Y => ACC_Y,
        ACC_Z => ACC_Z);

    output_V_U : component bpnn_output_V
    generic map (
        DataWidth => 20,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0);

    hid1_trans_din_V_U : component bpnn_hid1_trans_djbC
    generic map (
        DataWidth => 20,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hid1_trans_din_V_address0,
        ce0 => hid1_trans_din_V_ce0,
        we0 => hid1_trans_din_V_we0,
        d0 => ap_const_lv20_0,
        q0 => hid1_trans_din_V_q0,
        address1 => hid1_trans_din_V_address1,
        ce1 => hid1_trans_din_V_ce1,
        we1 => hid1_trans_din_V_we1,
        d1 => hid1_trans_din_V_d1);

    out_trans_din_V_U : component bpnn_out_trans_dikbM
    generic map (
        DataWidth => 20,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_trans_din_V_address0,
        ce0 => out_trans_din_V_ce0,
        we0 => out_trans_din_V_we0,
        d0 => ap_const_lv20_0,
        q0 => out_trans_din_V_q0,
        address1 => out_trans_din_V_address1,
        ce1 => out_trans_din_V_ce1,
        we1 => out_trans_din_V_we1,
        d1 => out_trans_din_V_d1);

    hid1_out_V_U : component bpnn_hid1_out_V
    generic map (
        DataWidth => 20,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hid1_out_V_address0,
        ce0 => hid1_out_V_ce0,
        we0 => hid1_out_V_we0,
        d0 => hid1_out_V_d0,
        q0 => hid1_out_V_q0,
        address1 => hid1_out_V_address1,
        ce1 => hid1_out_V_ce1,
        we1 => hid1_out_V_we1,
        d1 => ap_const_lv20_0,
        q1 => hid1_out_V_q1);

    grp_sigmoid_f_fu_1265 : component sigmoid_f
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sigmoid_f_fu_1265_ap_start,
        ap_done => grp_sigmoid_f_fu_1265_ap_done,
        ap_idle => grp_sigmoid_f_fu_1265_ap_idle,
        ap_ready => grp_sigmoid_f_fu_1265_ap_ready,
        sigm_din_V => grp_sigmoid_f_fu_1265_sigm_din_V,
        ap_return => grp_sigmoid_f_fu_1265_ap_return);

    bpnn_fpext_32ns_6lbW_U14 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => ACC_X_read_reg_4525,
        dout => d_assign_5_fu_1279_p1);

    bpnn_fpext_32ns_6lbW_U15 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => ACC_Y_read_reg_4520,
        dout => d_assign_6_fu_1282_p1);

    bpnn_fpext_32ns_6lbW_U16 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => ACC_Z_read_reg_4515,
        dout => d_assign_7_fu_1285_p1);

    bpnn_fpext_32ns_6lbW_U17 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => Ind_read_reg_4545,
        dout => d_assign_1_fu_1288_p1);

    bpnn_fpext_32ns_6lbW_U18 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => Lit_read_reg_4530,
        dout => d_assign_4_fu_1291_p1);

    bpnn_fpext_32ns_6lbW_U19 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => Mid_read_reg_4540,
        dout => d_assign_2_fu_1294_p1);

    bpnn_fpext_32ns_6lbW_U20 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => Rin_read_reg_4535,
        dout => d_assign_3_fu_1297_p1);

    bpnn_fpext_32ns_6lbW_U21 : component bpnn_fpext_32ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => Thu_read_reg_4550,
        dout => d_assign_fu_1300_p1);

    bpnn_mul_mul_20s_mb6_U22 : component bpnn_mul_mul_20s_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 37)
    port map (
        din0 => p_Val2_s_fu_4251_p0,
        din1 => iw_V_0_load_reg_5083,
        dout => p_Val2_s_fu_4251_p2);

    bpnn_mul_mul_20s_mb6_U23 : component bpnn_mul_mul_20s_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 37)
    port map (
        din0 => p_Val2_43_1_fu_4256_p0,
        din1 => iw_V_1_load_reg_5088,
        dout => p_Val2_43_1_fu_4256_p2);

    bpnn_mul_mul_20s_mb6_U24 : component bpnn_mul_mul_20s_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 37)
    port map (
        din0 => p_Val2_43_2_fu_4261_p0,
        din1 => iw_V_2_load_reg_5124,
        dout => p_Val2_43_2_fu_4261_p2);

    bpnn_mul_mul_20s_mb6_U25 : component bpnn_mul_mul_20s_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 37)
    port map (
        din0 => p_Val2_43_3_fu_4266_p0,
        din1 => iw_V_3_load_reg_5129,
        dout => p_Val2_43_3_fu_4266_p2);

    bpnn_mul_mul_20s_mb6_U26 : component bpnn_mul_mul_20s_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 37)
    port map (
        din0 => p_Val2_43_4_fu_4271_p0,
        din1 => iw_V_4_load_reg_5134,
        dout => p_Val2_43_4_fu_4271_p2);

    bpnn_mul_mul_20s_mb6_U27 : component bpnn_mul_mul_20s_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 37)
    port map (
        din0 => p_Val2_43_5_fu_4276_p0,
        din1 => iw_V_5_load_reg_5169,
        dout => p_Val2_43_5_fu_4276_p2);

    bpnn_mul_mul_20s_mb6_U28 : component bpnn_mul_mul_20s_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 19,
        dout_WIDTH => 37)
    port map (
        din0 => p_Val2_43_6_fu_4281_p0,
        din1 => iw_V_6_load_reg_5174,
        dout => p_Val2_43_6_fu_4281_p2);

    bpnn_mac_muladd_2ncg_U29 : component bpnn_mac_muladd_2ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 18,
        din2_WIDTH => 37,
        dout_WIDTH => 37)
    port map (
        din0 => grp_fu_4286_p0,
        din1 => iw_V_7_load_reg_5199,
        din2 => grp_fu_4286_p2,
        dout => grp_fu_4286_p3);

    bpnn_mac_muladd_1ocq_U30 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_0_load_reg_5459,
        din1 => grp_fu_4294_p1,
        din2 => grp_fu_4294_p2,
        dout => grp_fu_4294_p3);

    bpnn_mac_muladd_1pcA_U31 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_1_load_reg_5464,
        din1 => grp_fu_4302_p1,
        din2 => grp_fu_4302_p2,
        dout => grp_fu_4302_p3);

    bpnn_mac_muladd_1qcK_U32 : component bpnn_mac_muladd_1qcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_2_load_reg_5479,
        din1 => grp_fu_4310_p1,
        din2 => grp_fu_4310_p2,
        dout => grp_fu_4310_p3);

    bpnn_mac_muladd_1ocq_U33 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_3_load_reg_5489,
        din1 => grp_fu_4318_p1,
        din2 => grp_fu_4318_p2,
        dout => grp_fu_4318_p3);

    bpnn_mac_muladd_1ocq_U34 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_4_load_reg_5504,
        din1 => grp_fu_4326_p1,
        din2 => grp_fu_4326_p2,
        dout => grp_fu_4326_p3);

    bpnn_mac_muladd_1pcA_U35 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_5_load_reg_5514,
        din1 => grp_fu_4334_p1,
        din2 => grp_fu_4334_p2,
        dout => grp_fu_4334_p3);

    bpnn_mac_muladd_1pcA_U36 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_6_load_reg_5529,
        din1 => grp_fu_4342_p1,
        din2 => grp_fu_4342_p2,
        dout => grp_fu_4342_p3);

    bpnn_mac_muladd_1ocq_U37 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_7_load_reg_5539,
        din1 => grp_fu_4350_p1,
        din2 => grp_fu_4350_p2,
        dout => grp_fu_4350_p3);

    bpnn_mac_muladd_1ocq_U38 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_8_load_reg_5554,
        din1 => grp_fu_4358_p1,
        din2 => grp_fu_4358_p2,
        dout => grp_fu_4358_p3);

    bpnn_mac_muladd_1pcA_U39 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_9_load_reg_5564,
        din1 => grp_fu_4366_p1,
        din2 => grp_fu_4366_p2,
        dout => grp_fu_4366_p3);

    bpnn_mac_muladd_1qcK_U40 : component bpnn_mac_muladd_1qcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_10_load_reg_5579,
        din1 => grp_fu_4374_p1,
        din2 => grp_fu_4374_p2,
        dout => grp_fu_4374_p3);

    bpnn_mac_muladd_1pcA_U41 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_11_load_reg_5589,
        din1 => grp_fu_4382_p1,
        din2 => grp_fu_4382_p2,
        dout => grp_fu_4382_p3);

    bpnn_mac_muladd_1pcA_U42 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_12_load_reg_5604,
        din1 => grp_fu_4390_p1,
        din2 => grp_fu_4390_p2,
        dout => grp_fu_4390_p3);

    bpnn_mac_muladd_1ocq_U43 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_13_load_reg_5614,
        din1 => grp_fu_4398_p1,
        din2 => grp_fu_4398_p2,
        dout => grp_fu_4398_p3);

    bpnn_mac_muladd_1qcK_U44 : component bpnn_mac_muladd_1qcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_14_load_reg_5629,
        din1 => grp_fu_4406_p1,
        din2 => grp_fu_4406_p2,
        dout => grp_fu_4406_p3);

    bpnn_mac_muladd_1pcA_U45 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_15_load_reg_5639,
        din1 => grp_fu_4414_p1,
        din2 => grp_fu_4414_p2,
        dout => grp_fu_4414_p3);

    bpnn_mac_muladd_1pcA_U46 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_16_load_reg_5654,
        din1 => grp_fu_4422_p1,
        din2 => grp_fu_4422_p2,
        dout => grp_fu_4422_p3);

    bpnn_mac_muladd_1ocq_U47 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_17_load_reg_5664,
        din1 => grp_fu_4430_p1,
        din2 => grp_fu_4430_p2,
        dout => grp_fu_4430_p3);

    bpnn_mac_muladd_1ocq_U48 : component bpnn_mac_muladd_1ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_18_load_reg_5674,
        din1 => grp_fu_4438_p1,
        din2 => grp_fu_4438_p2,
        dout => grp_fu_4438_p3);

    bpnn_mac_muladd_1pcA_U49 : component bpnn_mac_muladd_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        din2_WIDTH => 39,
        dout_WIDTH => 39)
    port map (
        din0 => lw_V_19_load_reg_5689,
        din1 => grp_fu_4446_p1,
        din2 => grp_fu_4446_p2,
        dout => grp_fu_4446_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state37) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state37)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state37);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_sigmoid_f_fu_1265_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sigmoid_f_fu_1265_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond1_reg_5051_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                    grp_sigmoid_f_fu_1265_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sigmoid_f_fu_1265_ap_ready = ap_const_logic_1)) then 
                    grp_sigmoid_f_fu_1265_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_1218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                i1_reg_1218 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_fu_3723_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i1_reg_1218 <= i_2_fu_3729_p2;
            end if; 
        end if;
    end process;

    i_i_reg_1241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                i_i_reg_1241 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_i_reg_1241 <= i_3_reg_5707;
            end if; 
        end if;
    end process;

    i_reg_1207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_3415_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_1207 <= i_1_fu_3421_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_1207 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    index_reg_1253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                index_reg_1253 <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                index_reg_1253 <= index_2_i_index_i_fu_4243_p3;
            end if; 
        end if;
    end process;

    p_0_i_reg_1229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                p_0_i_reg_1229 <= ap_const_lv20_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                p_0_i_reg_1229 <= max_V_i_0_i_fu_4235_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ACC_X_read_reg_4525 <= ACC_X;
                ACC_Y_read_reg_4520 <= ACC_Y;
                ACC_Z_read_reg_4515 <= ACC_Z;
                Ind_read_reg_4545 <= Ind;
                Lit_read_reg_4530 <= Lit;
                Mid_read_reg_4540 <= Mid;
                Rin_read_reg_4535 <= Rin;
                Thu_read_reg_4550 <= Thu;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                OP1_V_1_cast_reg_5016 <= OP1_V_1_cast_fu_3387_p1;
                OP1_V_2_cast_reg_5021 <= OP1_V_2_cast_fu_3391_p1;
                OP1_V_3_cast_reg_5026 <= OP1_V_3_cast_fu_3395_p1;
                OP1_V_4_cast_reg_5031 <= OP1_V_4_cast_fu_3399_p1;
                OP1_V_5_cast_reg_5036 <= OP1_V_5_cast_fu_3403_p1;
                OP1_V_7_cast_reg_5046 <= OP1_V_7_cast_fu_3411_p1;
                OP1_V_cast_15_reg_5041 <= OP1_V_cast_15_fu_3407_p1;
                OP1_V_cast_reg_5011 <= OP1_V_cast_fu_3383_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                OP1_V_6_10_cast_cast_reg_5364 <= OP1_V_6_10_cast_cast_fu_3694_p1;
                OP1_V_6_11_cast_cast_reg_5369 <= OP1_V_6_11_cast_cast_fu_3697_p1;
                OP1_V_6_12_cast_cast_reg_5374 <= OP1_V_6_12_cast_cast_fu_3700_p1;
                OP1_V_6_13_cast_cast_reg_5379 <= OP1_V_6_13_cast_cast_fu_3703_p1;
                OP1_V_6_14_cast_cast_reg_5384 <= OP1_V_6_14_cast_cast_fu_3706_p1;
                OP1_V_6_15_cast_cast_reg_5389 <= OP1_V_6_15_cast_cast_fu_3709_p1;
                OP1_V_6_16_cast_cast_reg_5394 <= OP1_V_6_16_cast_cast_fu_3712_p1;
                OP1_V_6_17_cast_cast_reg_5399 <= OP1_V_6_17_cast_cast_fu_3715_p1;
                OP1_V_6_18_cast_cast_reg_5404 <= OP1_V_6_18_cast_cast_fu_3719_p1;
                OP1_V_6_1_cast_cast_reg_5314 <= OP1_V_6_1_cast_cast_fu_3664_p1;
                OP1_V_6_2_cast_cast_reg_5319 <= OP1_V_6_2_cast_cast_fu_3667_p1;
                OP1_V_6_3_cast_cast_reg_5324 <= OP1_V_6_3_cast_cast_fu_3670_p1;
                OP1_V_6_4_cast_cast_reg_5329 <= OP1_V_6_4_cast_cast_fu_3673_p1;
                OP1_V_6_5_cast_cast_reg_5334 <= OP1_V_6_5_cast_cast_fu_3676_p1;
                OP1_V_6_6_cast_cast_reg_5339 <= OP1_V_6_6_cast_cast_fu_3679_p1;
                OP1_V_6_7_cast_cast_reg_5344 <= OP1_V_6_7_cast_cast_fu_3682_p1;
                OP1_V_6_8_cast_cast_reg_5349 <= OP1_V_6_8_cast_cast_fu_3685_p1;
                OP1_V_6_9_cast_cast_reg_5354 <= OP1_V_6_9_cast_cast_fu_3688_p1;
                OP1_V_6_cast_cast_16_reg_5359 <= OP1_V_6_cast_cast_16_fu_3691_p1;
                OP1_V_6_cast_cast_reg_5309 <= OP1_V_6_cast_cast_fu_3661_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_4202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                ap_return <= index_reg_1253;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_5051 <= exitcond1_fu_3415_p2;
                exitcond1_reg_5051_pp0_iter1_reg <= exitcond1_reg_5051;
                    tmp_130_reg_5060_pp0_iter1_reg(4 downto 0) <= tmp_130_reg_5060(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond1_reg_5051_pp0_iter10_reg <= exitcond1_reg_5051_pp0_iter9_reg;
                exitcond1_reg_5051_pp0_iter11_reg <= exitcond1_reg_5051_pp0_iter10_reg;
                exitcond1_reg_5051_pp0_iter12_reg <= exitcond1_reg_5051_pp0_iter11_reg;
                exitcond1_reg_5051_pp0_iter13_reg <= exitcond1_reg_5051_pp0_iter12_reg;
                exitcond1_reg_5051_pp0_iter2_reg <= exitcond1_reg_5051_pp0_iter1_reg;
                exitcond1_reg_5051_pp0_iter3_reg <= exitcond1_reg_5051_pp0_iter2_reg;
                exitcond1_reg_5051_pp0_iter4_reg <= exitcond1_reg_5051_pp0_iter3_reg;
                exitcond1_reg_5051_pp0_iter5_reg <= exitcond1_reg_5051_pp0_iter4_reg;
                exitcond1_reg_5051_pp0_iter6_reg <= exitcond1_reg_5051_pp0_iter5_reg;
                exitcond1_reg_5051_pp0_iter7_reg <= exitcond1_reg_5051_pp0_iter6_reg;
                exitcond1_reg_5051_pp0_iter8_reg <= exitcond1_reg_5051_pp0_iter7_reg;
                exitcond1_reg_5051_pp0_iter9_reg <= exitcond1_reg_5051_pp0_iter8_reg;
                hid1_trans_din_V_add_20_reg_5108_pp0_iter3_reg <= hid1_trans_din_V_add_20_reg_5108;
                hid1_trans_din_V_add_20_reg_5108_pp0_iter4_reg <= hid1_trans_din_V_add_20_reg_5108_pp0_iter3_reg;
                hid1_trans_din_V_add_20_reg_5108_pp0_iter5_reg <= hid1_trans_din_V_add_20_reg_5108_pp0_iter4_reg;
                    tmp_130_reg_5060_pp0_iter10_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter9_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter11_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter10_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter12_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter11_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter13_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter12_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter2_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter1_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter3_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter2_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter4_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter3_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter5_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter4_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter6_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter5_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter7_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter6_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter8_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter7_reg(4 downto 0);
                    tmp_130_reg_5060_pp0_iter9_reg(4 downto 0) <= tmp_130_reg_5060_pp0_iter8_reg(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond2_reg_5409 <= exitcond2_fu_3723_p2;
                exitcond2_reg_5409_pp1_iter1_reg <= exitcond2_reg_5409;
                    tmp_143_reg_5418_pp1_iter1_reg(3 downto 0) <= tmp_143_reg_5418(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                exitcond2_reg_5409_pp1_iter10_reg <= exitcond2_reg_5409_pp1_iter9_reg;
                exitcond2_reg_5409_pp1_iter11_reg <= exitcond2_reg_5409_pp1_iter10_reg;
                exitcond2_reg_5409_pp1_iter2_reg <= exitcond2_reg_5409_pp1_iter1_reg;
                exitcond2_reg_5409_pp1_iter3_reg <= exitcond2_reg_5409_pp1_iter2_reg;
                exitcond2_reg_5409_pp1_iter4_reg <= exitcond2_reg_5409_pp1_iter3_reg;
                exitcond2_reg_5409_pp1_iter5_reg <= exitcond2_reg_5409_pp1_iter4_reg;
                exitcond2_reg_5409_pp1_iter6_reg <= exitcond2_reg_5409_pp1_iter5_reg;
                exitcond2_reg_5409_pp1_iter7_reg <= exitcond2_reg_5409_pp1_iter6_reg;
                exitcond2_reg_5409_pp1_iter8_reg <= exitcond2_reg_5409_pp1_iter7_reg;
                exitcond2_reg_5409_pp1_iter9_reg <= exitcond2_reg_5409_pp1_iter8_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter10_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter9_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter11_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter10_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter2_reg <= out_trans_din_V_addr_14_reg_5453;
                out_trans_din_V_addr_14_reg_5453_pp1_iter3_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter2_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter4_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter3_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter5_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter4_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter6_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter5_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter7_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter6_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter8_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter7_reg;
                out_trans_din_V_addr_14_reg_5453_pp1_iter9_reg <= out_trans_din_V_addr_14_reg_5453_pp1_iter8_reg;
                    tmp_143_reg_5418_pp1_iter10_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter9_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter11_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter10_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter2_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter1_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter3_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter2_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter4_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter3_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter5_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter4_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter6_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter5_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter7_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter6_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter8_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter7_reg(3 downto 0);
                    tmp_143_reg_5418_pp1_iter9_reg(3 downto 0) <= tmp_143_reg_5418_pp1_iter8_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                exp_tmp_V_1_reg_4593 <= ireg_V_1_fu_1339_p1(62 downto 52);
                exp_tmp_V_2_reg_4615 <= ireg_V_2_fu_1375_p1(62 downto 52);
                exp_tmp_V_3_reg_4637 <= ireg_V_3_fu_1411_p1(62 downto 52);
                exp_tmp_V_4_reg_4659 <= ireg_V_4_fu_1447_p1(62 downto 52);
                exp_tmp_V_5_reg_4681 <= ireg_V_5_fu_1483_p1(62 downto 52);
                exp_tmp_V_6_reg_4703 <= ireg_V_6_fu_1519_p1(62 downto 52);
                exp_tmp_V_7_reg_4725 <= ireg_V_7_fu_1555_p1(62 downto 52);
                exp_tmp_V_reg_4571 <= ireg_V_fu_1303_p1(62 downto 52);
                isneg_1_reg_4587 <= ireg_V_1_fu_1339_p1(63 downto 63);
                isneg_2_reg_4609 <= ireg_V_2_fu_1375_p1(63 downto 63);
                isneg_3_reg_4631 <= ireg_V_3_fu_1411_p1(63 downto 63);
                isneg_4_reg_4653 <= ireg_V_4_fu_1447_p1(63 downto 63);
                isneg_5_reg_4675 <= ireg_V_5_fu_1483_p1(63 downto 63);
                isneg_6_reg_4697 <= ireg_V_6_fu_1519_p1(63 downto 63);
                isneg_7_reg_4719 <= ireg_V_7_fu_1555_p1(63 downto 63);
                isneg_reg_4565 <= ireg_V_fu_1303_p1(63 downto 63);
                tmp_101_reg_4713 <= tmp_101_fu_1549_p2;
                tmp_116_reg_4735 <= tmp_116_fu_1585_p2;
                tmp_119_reg_4642 <= tmp_119_fu_1437_p1;
                tmp_178_reg_4664 <= tmp_178_fu_1473_p1;
                tmp_184_reg_4686 <= tmp_184_fu_1509_p1;
                tmp_190_reg_4708 <= tmp_190_fu_1545_p1;
                tmp_196_reg_4730 <= tmp_196_fu_1581_p1;
                tmp_23_reg_4576 <= tmp_23_fu_1329_p1;
                tmp_24_reg_4603 <= tmp_24_fu_1369_p2;
                tmp_40_reg_4625 <= tmp_40_fu_1405_p2;
                tmp_54_reg_4647 <= tmp_54_fu_1441_p2;
                tmp_55_reg_4598 <= tmp_55_fu_1365_p1;
                tmp_70_reg_4669 <= tmp_70_fu_1477_p2;
                tmp_85_reg_4691 <= tmp_85_fu_1513_p2;
                tmp_87_reg_4620 <= tmp_87_fu_1401_p1;
                tmp_9_reg_4581 <= tmp_9_fu_1333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                hid1_out_V_load_10_reg_5269 <= hid1_out_V_q1;
                hid1_out_V_load_11_reg_5274 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                hid1_out_V_load_12_reg_5279 <= hid1_out_V_q1;
                hid1_out_V_load_13_reg_5284 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                hid1_out_V_load_14_reg_5289 <= hid1_out_V_q1;
                hid1_out_V_load_15_reg_5294 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                hid1_out_V_load_16_reg_5299 <= hid1_out_V_q1;
                hid1_out_V_load_17_reg_5304 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                hid1_out_V_load_1_reg_5224 <= hid1_out_V_q0;
                hid1_out_V_load_reg_5219 <= hid1_out_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                hid1_out_V_load_2_reg_5229 <= hid1_out_V_q1;
                hid1_out_V_load_3_reg_5234 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                hid1_out_V_load_4_reg_5239 <= hid1_out_V_q1;
                hid1_out_V_load_5_reg_5244 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                hid1_out_V_load_6_reg_5249 <= hid1_out_V_q1;
                hid1_out_V_load_7_reg_5254 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                hid1_out_V_load_8_reg_5259 <= hid1_out_V_q1;
                hid1_out_V_load_9_reg_5264 <= hid1_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_5051_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hid1_trans_din_V_add_20_reg_5108 <= tmp_130_reg_5060_pp0_iter1_reg(5 - 1 downto 0);
                iw_V_2_load_reg_5124 <= iw_V_2_q0;
                iw_V_3_load_reg_5129 <= iw_V_3_q0;
                iw_V_4_load_reg_5134 <= iw_V_4_q0;
                p_Val2_43_1_reg_5119 <= p_Val2_43_1_fu_4256_p2;
                p_Val2_s_reg_5114 <= p_Val2_s_fu_4251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                i_3_reg_5707 <= i_3_fu_4208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_5051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iw_V_0_load_reg_5083 <= iw_V_0_q0;
                iw_V_1_load_reg_5088 <= iw_V_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_5051_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                iw_V_5_load_reg_5169 <= iw_V_5_q0;
                iw_V_6_load_reg_5174 <= iw_V_6_q0;
                p_Val2_43_2_reg_5149 <= p_Val2_43_2_fu_4261_p2;
                p_Val2_43_3_reg_5159 <= p_Val2_43_3_fu_4266_p2;
                p_Val2_43_4_reg_5164 <= p_Val2_43_4_fu_4271_p2;
                tmp_134_reg_5154 <= p_Val2_44_1_fu_3470_p2(36 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_5051_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                iw_V_7_load_reg_5199 <= iw_V_7_q0;
                p_Val2_43_5_reg_5184 <= p_Val2_43_5_fu_4276_p2;
                p_Val2_43_6_reg_5194 <= p_Val2_43_6_fu_4281_p2;
                tmp_138_reg_5189 <= p_Val2_44_4_fu_3547_p2(36 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                lw_V_0_load_reg_5459 <= lw_V_0_q0;
                lw_V_1_load_reg_5464 <= lw_V_1_q0;
                out_trans_din_V_addr_14_reg_5453 <= tmp_143_reg_5418(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter5_reg = ap_const_lv1_0))) then
                lw_V_10_load_reg_5579 <= lw_V_10_q0;
                lw_V_11_load_reg_5589 <= lw_V_11_q0;
                tmp_159_reg_5584 <= grp_fu_4366_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter6_reg = ap_const_lv1_0))) then
                lw_V_12_load_reg_5604 <= lw_V_12_q0;
                lw_V_13_load_reg_5614 <= lw_V_13_q0;
                tmp_161_reg_5609 <= grp_fu_4382_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter7_reg = ap_const_lv1_0))) then
                lw_V_14_load_reg_5629 <= lw_V_14_q0;
                lw_V_15_load_reg_5639 <= lw_V_15_q0;
                tmp_163_reg_5634 <= grp_fu_4398_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter8_reg = ap_const_lv1_0))) then
                lw_V_16_load_reg_5654 <= lw_V_16_q0;
                lw_V_17_load_reg_5664 <= lw_V_17_q0;
                tmp_165_reg_5659 <= grp_fu_4414_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter9_reg = ap_const_lv1_0))) then
                lw_V_18_load_reg_5674 <= lw_V_18_q0;
                tmp_167_reg_5679 <= grp_fu_4430_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter10_reg = ap_const_lv1_0))) then
                lw_V_19_load_reg_5689 <= lw_V_19_q0;
                tmp_168_reg_5694 <= grp_fu_4438_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter1_reg = ap_const_lv1_0))) then
                lw_V_2_load_reg_5479 <= lw_V_2_q0;
                lw_V_3_load_reg_5489 <= lw_V_3_q0;
                tmp_149_reg_5484 <= grp_fu_4302_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter2_reg = ap_const_lv1_0))) then
                lw_V_4_load_reg_5504 <= lw_V_4_q0;
                lw_V_5_load_reg_5514 <= lw_V_5_q0;
                tmp_153_reg_5509 <= grp_fu_4318_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter3_reg = ap_const_lv1_0))) then
                lw_V_6_load_reg_5529 <= lw_V_6_q0;
                lw_V_7_load_reg_5539 <= lw_V_7_q0;
                tmp_155_reg_5534 <= grp_fu_4334_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter4_reg = ap_const_lv1_0))) then
                lw_V_8_load_reg_5554 <= lw_V_8_q0;
                lw_V_9_load_reg_5564 <= lw_V_9_q0;
                tmp_157_reg_5559 <= grp_fu_4350_p3(38 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                man_V_11_reg_4841 <= man_V_11_fu_1818_p3;
                man_V_14_reg_4871 <= man_V_14_fu_1887_p3;
                man_V_17_reg_4901 <= man_V_17_fu_1956_p3;
                man_V_20_reg_4931 <= man_V_20_fu_2025_p3;
                man_V_23_reg_4961 <= man_V_23_fu_2094_p3;
                man_V_2_reg_4751 <= man_V_2_fu_1611_p3;
                man_V_5_reg_4781 <= man_V_5_fu_1680_p3;
                man_V_8_reg_4811 <= man_V_8_fu_1749_p3;
                sh_amt_1_reg_4792 <= sh_amt_1_fu_1711_p3;
                sh_amt_2_reg_4822 <= sh_amt_2_fu_1780_p3;
                sh_amt_3_reg_4852 <= sh_amt_3_fu_1849_p3;
                sh_amt_4_reg_4882 <= sh_amt_4_fu_1918_p3;
                sh_amt_5_reg_4912 <= sh_amt_5_fu_1987_p3;
                sh_amt_6_reg_4942 <= sh_amt_6_fu_2056_p3;
                sh_amt_7_reg_4972 <= sh_amt_7_fu_2125_p3;
                sh_amt_reg_4762 <= sh_amt_fu_1642_p3;
                tmp_102_reg_4936 <= tmp_102_fu_2038_p2;
                tmp_106_reg_4949 <= tmp_106_fu_2064_p2;
                tmp_10_reg_4756 <= tmp_10_fu_1624_p2;
                tmp_117_reg_4966 <= tmp_117_fu_2107_p2;
                tmp_121_reg_4979 <= tmp_121_fu_2133_p2;
                tmp_126_reg_4865 <= tmp_126_fu_1863_p1;
                tmp_13_reg_4769 <= tmp_13_fu_1650_p2;
                tmp_179_reg_4895 <= tmp_179_fu_1932_p1;
                tmp_185_reg_4925 <= tmp_185_fu_2001_p1;
                tmp_191_reg_4955 <= tmp_191_fu_2070_p1;
                tmp_197_reg_4985 <= tmp_197_fu_2139_p1;
                tmp_25_reg_4786 <= tmp_25_fu_1693_p2;
                tmp_28_reg_4799 <= tmp_28_fu_1719_p2;
                tmp_30_reg_4775 <= tmp_30_fu_1656_p1;
                tmp_41_reg_4816 <= tmp_41_fu_1762_p2;
                tmp_44_reg_4829 <= tmp_44_fu_1788_p2;
                tmp_56_reg_4846 <= tmp_56_fu_1831_p2;
                tmp_59_reg_4859 <= tmp_59_fu_1857_p2;
                tmp_62_reg_4805 <= tmp_62_fu_1725_p1;
                tmp_72_reg_4876 <= tmp_72_fu_1900_p2;
                tmp_75_reg_4889 <= tmp_75_fu_1926_p2;
                tmp_86_reg_4906 <= tmp_86_fu_1969_p2;
                tmp_90_reg_4919 <= tmp_90_fu_1995_p2;
                tmp_94_reg_4835 <= tmp_94_fu_1794_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_5051_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_15_reg_5214 <= hid1_b_V_q0;
                tmp_145_reg_5209 <= grp_fu_4286_p3(36 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_3415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    tmp_130_reg_5060(4 downto 0) <= tmp_130_fu_3427_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_fu_3723_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    tmp_143_reg_5418(3 downto 0) <= tmp_143_fu_3735_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_130_reg_5060(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter11_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter12_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_130_reg_5060_pp0_iter13_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_143_reg_5418_pp1_iter11_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond1_fu_3415_p2, ap_enable_reg_pp0_iter0, exitcond2_fu_3723_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state51, exitcond_i_fu_4202_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_3415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond1_fu_3415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((exitcond2_fu_3723_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((exitcond2_fu_3723_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((exitcond_i_fu_4202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_1687_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_22_fu_1660_p1));
    F2_2_fu_1756_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_38_fu_1729_p1));
    F2_3_fu_1825_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_53_fu_1798_p1));
    F2_4_fu_1894_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_69_fu_1867_p1));
    F2_5_fu_1963_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_84_fu_1936_p1));
    F2_6_fu_2032_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_100_fu_2005_p1));
    F2_7_fu_2101_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_115_fu_2074_p1));
    F2_fu_1618_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_s_fu_1591_p1));
        OP1_V_1_cast_fu_3387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_1_V_fu_2445_p3),37));

        OP1_V_2_cast_fu_3391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_2_V_fu_2600_p3),37));

        OP1_V_3_cast_fu_3395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_3_V_fu_2755_p3),37));

        OP1_V_4_cast_fu_3399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_4_V_fu_2910_p3),37));

        OP1_V_5_cast_fu_3403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_5_V_fu_3065_p3),37));

        OP1_V_6_10_cast_cast_fu_3694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_11_reg_5274),37));

        OP1_V_6_11_cast_cast_fu_3697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_12_reg_5279),37));

        OP1_V_6_12_cast_cast_fu_3700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_13_reg_5284),38));

        OP1_V_6_13_cast_cast_fu_3703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_14_reg_5289),36));

        OP1_V_6_14_cast_cast_fu_3706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_15_reg_5294),37));

        OP1_V_6_15_cast_cast_fu_3709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_16_reg_5299),37));

        OP1_V_6_16_cast_cast_fu_3712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_17_reg_5304),38));

        OP1_V_6_17_cast_cast_fu_3715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_q1),38));

        OP1_V_6_18_cast_cast_fu_3719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_q0),37));

        OP1_V_6_1_cast_cast_fu_3664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_1_reg_5224),37));

        OP1_V_6_2_cast_cast_fu_3667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_2_reg_5229),36));

        OP1_V_6_3_cast_cast_fu_3670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_3_reg_5234),38));

        OP1_V_6_4_cast_cast_fu_3673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_4_reg_5239),38));

        OP1_V_6_5_cast_cast_fu_3676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_5_reg_5244),37));

        OP1_V_6_6_cast_cast_fu_3679_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_6_reg_5249),37));

        OP1_V_6_7_cast_cast_fu_3682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_7_reg_5254),38));

        OP1_V_6_8_cast_cast_fu_3685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_8_reg_5259),38));

        OP1_V_6_9_cast_cast_fu_3688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_9_reg_5264),37));

        OP1_V_6_cast_cast_16_fu_3691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_10_reg_5269),36));

        OP1_V_6_cast_cast_fu_3661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hid1_out_V_load_reg_5219),38));

        OP1_V_7_cast_fu_3411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_7_V_fu_3375_p3),37));

        OP1_V_cast_15_fu_3407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_6_V_fu_3220_p3),37));

        OP1_V_cast_fu_3383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_0_V_fu_2290_p3),37));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(11);
    ap_CS_fsm_state27 <= ap_CS_fsm(12);
    ap_CS_fsm_state28 <= ap_CS_fsm(13);
    ap_CS_fsm_state29 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state31 <= ap_CS_fsm(16);
    ap_CS_fsm_state32 <= ap_CS_fsm(17);
    ap_CS_fsm_state33 <= ap_CS_fsm(18);
    ap_CS_fsm_state34 <= ap_CS_fsm(19);
    ap_CS_fsm_state35 <= ap_CS_fsm(20);
    ap_CS_fsm_state36 <= ap_CS_fsm(21);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(23);
    ap_CS_fsm_state51 <= ap_CS_fsm(24);
    ap_CS_fsm_state52 <= ap_CS_fsm(25);
    ap_CS_fsm_state53 <= ap_CS_fsm(26);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state11_assign_proc : process(exitcond1_fu_3415_p2)
    begin
        if ((exitcond1_fu_3415_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state37_assign_proc : process(exitcond2_fu_3723_p2)
    begin
        if ((exitcond2_fu_3723_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_3415_p2 <= "1" when (i_reg_1207 = ap_const_lv5_14) else "0";
    exitcond2_fu_3723_p2 <= "1" when (i1_reg_1218 = ap_const_lv4_E) else "0";
    exitcond_i_fu_4202_p2 <= "1" when (i_i_reg_1241 = ap_const_lv4_E) else "0";
    grp_fu_4286_p0 <= OP1_V_7_cast_reg_5046(20 - 1 downto 0);
    grp_fu_4286_p2 <= (tmp_141_fu_3606_p4 & ap_const_lv17_0);
    grp_fu_4294_p1 <= OP1_V_6_cast_cast_reg_5309(20 - 1 downto 0);
    grp_fu_4294_p2 <= (out_trans_din_V_q0 & ap_const_lv19_0);
    grp_fu_4302_p1 <= OP1_V_6_1_cast_cast_reg_5314(20 - 1 downto 0);
    grp_fu_4302_p2 <= (tmp_146_fu_3755_p4 & ap_const_lv19_0);
    grp_fu_4310_p1 <= OP1_V_6_2_cast_cast_reg_5319(20 - 1 downto 0);
    grp_fu_4310_p2 <= (tmp_149_reg_5484 & ap_const_lv19_0);
    grp_fu_4318_p1 <= OP1_V_6_3_cast_cast_reg_5324(20 - 1 downto 0);
    grp_fu_4318_p2 <= (tmp_152_fu_3794_p4 & ap_const_lv19_0);
    grp_fu_4326_p1 <= OP1_V_6_4_cast_cast_reg_5329(20 - 1 downto 0);
    grp_fu_4326_p2 <= (tmp_153_reg_5509 & ap_const_lv19_0);
    grp_fu_4334_p1 <= OP1_V_6_5_cast_cast_reg_5334(20 - 1 downto 0);
    grp_fu_4334_p2 <= (tmp_154_fu_3833_p4 & ap_const_lv19_0);
    grp_fu_4342_p1 <= OP1_V_6_6_cast_cast_reg_5339(20 - 1 downto 0);
    grp_fu_4342_p2 <= (tmp_155_reg_5534 & ap_const_lv19_0);
    grp_fu_4350_p1 <= OP1_V_6_7_cast_cast_reg_5344(20 - 1 downto 0);
    grp_fu_4350_p2 <= (tmp_156_fu_3872_p4 & ap_const_lv19_0);
    grp_fu_4358_p1 <= OP1_V_6_8_cast_cast_reg_5349(20 - 1 downto 0);
    grp_fu_4358_p2 <= (tmp_157_reg_5559 & ap_const_lv19_0);
    grp_fu_4366_p1 <= OP1_V_6_9_cast_cast_reg_5354(20 - 1 downto 0);
    grp_fu_4366_p2 <= (tmp_158_fu_3911_p4 & ap_const_lv19_0);
    grp_fu_4374_p1 <= OP1_V_6_cast_cast_16_reg_5359(20 - 1 downto 0);
    grp_fu_4374_p2 <= (tmp_159_reg_5584 & ap_const_lv19_0);
    grp_fu_4382_p1 <= OP1_V_6_10_cast_cast_reg_5364(20 - 1 downto 0);
    grp_fu_4382_p2 <= (tmp_160_fu_3950_p4 & ap_const_lv19_0);
    grp_fu_4390_p1 <= OP1_V_6_11_cast_cast_reg_5369(20 - 1 downto 0);
    grp_fu_4390_p2 <= (tmp_161_reg_5609 & ap_const_lv19_0);
    grp_fu_4398_p1 <= OP1_V_6_12_cast_cast_reg_5374(20 - 1 downto 0);
    grp_fu_4398_p2 <= (tmp_162_fu_3989_p4 & ap_const_lv19_0);
    grp_fu_4406_p1 <= OP1_V_6_13_cast_cast_reg_5379(20 - 1 downto 0);
    grp_fu_4406_p2 <= (tmp_163_reg_5634 & ap_const_lv19_0);
    grp_fu_4414_p1 <= OP1_V_6_14_cast_cast_reg_5384(20 - 1 downto 0);
    grp_fu_4414_p2 <= (tmp_164_fu_4028_p4 & ap_const_lv19_0);
    grp_fu_4422_p1 <= OP1_V_6_15_cast_cast_reg_5389(20 - 1 downto 0);
    grp_fu_4422_p2 <= (tmp_165_reg_5659 & ap_const_lv19_0);
    grp_fu_4430_p1 <= OP1_V_6_16_cast_cast_reg_5394(20 - 1 downto 0);
    grp_fu_4430_p2 <= (tmp_166_fu_4067_p4 & ap_const_lv19_0);
    grp_fu_4438_p1 <= OP1_V_6_17_cast_cast_reg_5399(20 - 1 downto 0);
    grp_fu_4438_p2 <= (tmp_167_reg_5679 & ap_const_lv19_0);
    grp_fu_4446_p1 <= OP1_V_6_18_cast_cast_reg_5404(20 - 1 downto 0);
    grp_fu_4446_p2 <= (tmp_168_reg_5694 & ap_const_lv19_0);
    grp_sigmoid_f_fu_1265_ap_start <= grp_sigmoid_f_fu_1265_ap_start_reg;
    grp_sigmoid_f_fu_1265_sigm_din_V <= p_Val2_3_fu_3643_p2(21 downto 2);
    hid1_b_V_address0 <= tmp_130_reg_5060_pp0_iter3_reg(5 - 1 downto 0);

    hid1_b_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            hid1_b_V_ce0 <= ap_const_logic_1;
        else 
            hid1_b_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_out_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_130_reg_5060_pp0_iter13_reg, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            hid1_out_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            hid1_out_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            hid1_out_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            hid1_out_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            hid1_out_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            hid1_out_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            hid1_out_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            hid1_out_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            hid1_out_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            hid1_out_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hid1_out_V_address0 <= tmp_130_reg_5060_pp0_iter13_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hid1_out_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hid1_out_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hid1_out_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hid1_out_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hid1_out_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hid1_out_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hid1_out_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hid1_out_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hid1_out_V_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hid1_out_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            hid1_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    hid1_out_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            hid1_out_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            hid1_out_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            hid1_out_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            hid1_out_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            hid1_out_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            hid1_out_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            hid1_out_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            hid1_out_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            hid1_out_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            hid1_out_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hid1_out_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hid1_out_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hid1_out_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hid1_out_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hid1_out_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hid1_out_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hid1_out_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hid1_out_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hid1_out_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hid1_out_V_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            hid1_out_V_address1 <= "XXXXX";
        end if; 
    end process;


    hid1_out_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp0_stage0_11001, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_enable_reg_pp0_iter14, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_out_V_ce0 <= ap_const_logic_1;
        else 
            hid1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_out_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_out_V_ce1 <= ap_const_logic_1;
        else 
            hid1_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_out_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_enable_reg_pp0_iter14, grp_sigmoid_f_fu_1265_ap_return, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hid1_out_V_d0 <= grp_sigmoid_f_fu_1265_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            hid1_out_V_d0 <= ap_const_lv20_0;
        else 
            hid1_out_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hid1_out_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp0_stage0_11001, exitcond1_reg_5051_pp0_iter13_reg, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((exitcond1_reg_5051_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_out_V_we0 <= ap_const_logic_1;
        else 
            hid1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_out_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_out_V_we1 <= ap_const_logic_1;
        else 
            hid1_out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_trans_din_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_130_reg_5060_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hid1_trans_din_V_address0 <= tmp_130_reg_5060_pp0_iter1_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hid1_trans_din_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            hid1_trans_din_V_address0 <= "XXXXX";
        end if; 
    end process;


    hid1_trans_din_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, hid1_trans_din_V_add_20_reg_5108_pp0_iter5_reg, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hid1_trans_din_V_address1 <= hid1_trans_din_V_add_20_reg_5108_pp0_iter5_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hid1_trans_din_V_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            hid1_trans_din_V_address1 <= "XXXXX";
        end if; 
    end process;


    hid1_trans_din_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_trans_din_V_ce0 <= ap_const_logic_1;
        else 
            hid1_trans_din_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_trans_din_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_trans_din_V_ce1 <= ap_const_logic_1;
        else 
            hid1_trans_din_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_trans_din_V_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, p_Val2_3_fu_3643_p2)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hid1_trans_din_V_d1 <= p_Val2_3_fu_3643_p2(21 downto 2);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            hid1_trans_din_V_d1 <= ap_const_lv20_0;
        else 
            hid1_trans_din_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hid1_trans_din_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_trans_din_V_we0 <= ap_const_logic_1;
        else 
            hid1_trans_din_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hid1_trans_din_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp0_stage0_11001, exitcond1_reg_5051_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((exitcond1_reg_5051_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hid1_trans_din_V_we1 <= ap_const_logic_1;
        else 
            hid1_trans_din_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_3421_p2 <= std_logic_vector(unsigned(i_reg_1207) + unsigned(ap_const_lv5_1));
    i_2_fu_3729_p2 <= std_logic_vector(unsigned(i1_reg_1218) + unsigned(ap_const_lv4_1));
    i_3_fu_4208_p2 <= std_logic_vector(unsigned(i_i_reg_1241) + unsigned(ap_const_lv4_1));
    index_1_cast_fu_4231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_fu_4225_p2),32));
    index_1_fu_4225_p2 <= std_logic_vector(signed(ap_const_lv4_E) - signed(i_i_reg_1241));
    index_2_i_index_i_fu_4243_p3 <= 
        index_1_cast_fu_4231_p1 when (tmp_i_23_fu_4219_p2(0) = '1') else 
        index_reg_1253;
    input_0_V_fu_2290_p3 <= 
        newSel2_fu_2276_p3 when (or_cond2_fu_2284_p2(0) = '1') else 
        ap_const_lv20_0;
    input_1_V_fu_2445_p3 <= 
        newSel6_fu_2431_p3 when (or_cond5_fu_2439_p2(0) = '1') else 
        ap_const_lv20_0;
    input_2_V_fu_2600_p3 <= 
        newSel3_fu_2586_p3 when (or_cond8_fu_2594_p2(0) = '1') else 
        ap_const_lv20_0;
    input_3_V_fu_2755_p3 <= 
        newSel11_fu_2741_p3 when (or_cond11_fu_2749_p2(0) = '1') else 
        ap_const_lv20_0;
    input_4_V_fu_2910_p3 <= 
        newSel14_fu_2896_p3 when (or_cond14_fu_2904_p2(0) = '1') else 
        ap_const_lv20_0;
    input_5_V_fu_3065_p3 <= 
        newSel17_fu_3051_p3 when (or_cond17_fu_3059_p2(0) = '1') else 
        ap_const_lv20_0;
    input_6_V_fu_3220_p3 <= 
        newSel20_fu_3206_p3 when (or_cond20_fu_3214_p2(0) = '1') else 
        ap_const_lv20_0;
    input_7_V_fu_3375_p3 <= 
        newSel23_fu_3361_p3 when (or_cond23_fu_3369_p2(0) = '1') else 
        ap_const_lv20_0;
    ireg_V_1_fu_1339_p1 <= d_assign_1_fu_1288_p1;
    ireg_V_2_fu_1375_p1 <= d_assign_2_fu_1294_p1;
    ireg_V_3_fu_1411_p1 <= d_assign_3_fu_1297_p1;
    ireg_V_4_fu_1447_p1 <= d_assign_4_fu_1291_p1;
    ireg_V_5_fu_1483_p1 <= d_assign_5_fu_1279_p1;
    ireg_V_6_fu_1519_p1 <= d_assign_6_fu_1282_p1;
    ireg_V_7_fu_1555_p1 <= d_assign_7_fu_1285_p1;
    ireg_V_fu_1303_p1 <= d_assign_fu_1300_p1;
    iw_V_0_address0 <= tmp_130_fu_3427_p1(5 - 1 downto 0);

    iw_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iw_V_0_ce0 <= ap_const_logic_1;
        else 
            iw_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_V_1_address0 <= tmp_130_fu_3427_p1(5 - 1 downto 0);

    iw_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            iw_V_1_ce0 <= ap_const_logic_1;
        else 
            iw_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_V_2_address0 <= tmp_130_reg_5060(5 - 1 downto 0);

    iw_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            iw_V_2_ce0 <= ap_const_logic_1;
        else 
            iw_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_V_3_address0 <= tmp_130_reg_5060(5 - 1 downto 0);

    iw_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            iw_V_3_ce0 <= ap_const_logic_1;
        else 
            iw_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_V_4_address0 <= tmp_130_reg_5060(5 - 1 downto 0);

    iw_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            iw_V_4_ce0 <= ap_const_logic_1;
        else 
            iw_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_V_5_address0 <= tmp_130_reg_5060_pp0_iter1_reg(5 - 1 downto 0);

    iw_V_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iw_V_5_ce0 <= ap_const_logic_1;
        else 
            iw_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_V_6_address0 <= tmp_130_reg_5060_pp0_iter1_reg(5 - 1 downto 0);

    iw_V_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            iw_V_6_ce0 <= ap_const_logic_1;
        else 
            iw_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_V_7_address0 <= tmp_130_reg_5060_pp0_iter2_reg(5 - 1 downto 0);

    iw_V_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            iw_V_7_ce0 <= ap_const_logic_1;
        else 
            iw_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_0_address0 <= tmp_143_fu_3735_p1(4 - 1 downto 0);

    lw_V_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            lw_V_0_ce0 <= ap_const_logic_1;
        else 
            lw_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_10_address0 <= tmp_143_reg_5418_pp1_iter4_reg(4 - 1 downto 0);

    lw_V_10_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            lw_V_10_ce0 <= ap_const_logic_1;
        else 
            lw_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_11_address0 <= tmp_143_reg_5418_pp1_iter4_reg(4 - 1 downto 0);

    lw_V_11_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            lw_V_11_ce0 <= ap_const_logic_1;
        else 
            lw_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_12_address0 <= tmp_143_reg_5418_pp1_iter5_reg(4 - 1 downto 0);

    lw_V_12_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1))) then 
            lw_V_12_ce0 <= ap_const_logic_1;
        else 
            lw_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_13_address0 <= tmp_143_reg_5418_pp1_iter5_reg(4 - 1 downto 0);

    lw_V_13_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1))) then 
            lw_V_13_ce0 <= ap_const_logic_1;
        else 
            lw_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_14_address0 <= tmp_143_reg_5418_pp1_iter6_reg(4 - 1 downto 0);

    lw_V_14_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1))) then 
            lw_V_14_ce0 <= ap_const_logic_1;
        else 
            lw_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_15_address0 <= tmp_143_reg_5418_pp1_iter6_reg(4 - 1 downto 0);

    lw_V_15_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1))) then 
            lw_V_15_ce0 <= ap_const_logic_1;
        else 
            lw_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_16_address0 <= tmp_143_reg_5418_pp1_iter7_reg(4 - 1 downto 0);

    lw_V_16_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1))) then 
            lw_V_16_ce0 <= ap_const_logic_1;
        else 
            lw_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_17_address0 <= tmp_143_reg_5418_pp1_iter7_reg(4 - 1 downto 0);

    lw_V_17_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1))) then 
            lw_V_17_ce0 <= ap_const_logic_1;
        else 
            lw_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_18_address0 <= tmp_143_reg_5418_pp1_iter8_reg(4 - 1 downto 0);

    lw_V_18_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter9 = ap_const_logic_1))) then 
            lw_V_18_ce0 <= ap_const_logic_1;
        else 
            lw_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_19_address0 <= tmp_143_reg_5418_pp1_iter9_reg(4 - 1 downto 0);

    lw_V_19_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then 
            lw_V_19_ce0 <= ap_const_logic_1;
        else 
            lw_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_1_address0 <= tmp_143_fu_3735_p1(4 - 1 downto 0);

    lw_V_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            lw_V_1_ce0 <= ap_const_logic_1;
        else 
            lw_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_2_address0 <= tmp_143_reg_5418(4 - 1 downto 0);

    lw_V_2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            lw_V_2_ce0 <= ap_const_logic_1;
        else 
            lw_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_3_address0 <= tmp_143_reg_5418(4 - 1 downto 0);

    lw_V_3_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            lw_V_3_ce0 <= ap_const_logic_1;
        else 
            lw_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_4_address0 <= tmp_143_reg_5418_pp1_iter1_reg(4 - 1 downto 0);

    lw_V_4_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            lw_V_4_ce0 <= ap_const_logic_1;
        else 
            lw_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_5_address0 <= tmp_143_reg_5418_pp1_iter1_reg(4 - 1 downto 0);

    lw_V_5_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            lw_V_5_ce0 <= ap_const_logic_1;
        else 
            lw_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_6_address0 <= tmp_143_reg_5418_pp1_iter2_reg(4 - 1 downto 0);

    lw_V_6_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            lw_V_6_ce0 <= ap_const_logic_1;
        else 
            lw_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_7_address0 <= tmp_143_reg_5418_pp1_iter2_reg(4 - 1 downto 0);

    lw_V_7_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            lw_V_7_ce0 <= ap_const_logic_1;
        else 
            lw_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_8_address0 <= tmp_143_reg_5418_pp1_iter3_reg(4 - 1 downto 0);

    lw_V_8_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            lw_V_8_ce0 <= ap_const_logic_1;
        else 
            lw_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lw_V_9_address0 <= tmp_143_reg_5418_pp1_iter3_reg(4 - 1 downto 0);

    lw_V_9_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            lw_V_9_ce0 <= ap_const_logic_1;
        else 
            lw_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    man_V_10_fu_1812_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_3_fu_1808_p1));
    man_V_11_fu_1818_p3 <= 
        man_V_10_fu_1812_p2 when (isneg_3_reg_4631(0) = '1') else 
        p_Result_3_fu_1808_p1;
    man_V_13_fu_1881_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_4_fu_1877_p1));
    man_V_14_fu_1887_p3 <= 
        man_V_13_fu_1881_p2 when (isneg_4_reg_4653(0) = '1') else 
        p_Result_4_fu_1877_p1;
    man_V_16_fu_1950_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_5_fu_1946_p1));
    man_V_17_fu_1956_p3 <= 
        man_V_16_fu_1950_p2 when (isneg_5_reg_4675(0) = '1') else 
        p_Result_5_fu_1946_p1;
    man_V_19_fu_2019_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_6_fu_2015_p1));
    man_V_1_fu_1605_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_s_fu_1601_p1));
    man_V_20_fu_2025_p3 <= 
        man_V_19_fu_2019_p2 when (isneg_6_reg_4697(0) = '1') else 
        p_Result_6_fu_2015_p1;
    man_V_22_fu_2088_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_7_fu_2084_p1));
    man_V_23_fu_2094_p3 <= 
        man_V_22_fu_2088_p2 when (isneg_7_reg_4719(0) = '1') else 
        p_Result_7_fu_2084_p1;
    man_V_2_fu_1611_p3 <= 
        man_V_1_fu_1605_p2 when (isneg_reg_4565(0) = '1') else 
        p_Result_s_fu_1601_p1;
    man_V_4_fu_1674_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_1_fu_1670_p1));
    man_V_5_fu_1680_p3 <= 
        man_V_4_fu_1674_p2 when (isneg_1_reg_4587(0) = '1') else 
        p_Result_1_fu_1670_p1;
    man_V_7_fu_1743_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_2_fu_1739_p1));
    man_V_8_fu_1749_p3 <= 
        man_V_7_fu_1743_p2 when (isneg_2_reg_4609(0) = '1') else 
        p_Result_2_fu_1739_p1;
    max_V_i_0_i_fu_4235_p3 <= 
        output_V_q0 when (tmp_i_23_fu_4219_p2(0) = '1') else 
        p_0_i_reg_1229;
    newSel10_fu_2728_p3 <= 
        tmp_65_fu_2634_p3 when (sel_tmp32_fu_2685_p2(0) = '1') else 
        tmp_126_reg_4865;
    newSel11_fu_2741_p3 <= 
        newSel7_fu_2714_p3 when (or_cond9_fu_2722_p2(0) = '1') else 
        newSel10_fu_2728_p3;
    newSel12_fu_2869_p3 <= 
        tmp_181_fu_2805_p1 when (sel_tmp44_fu_2863_p2(0) = '1') else 
        tmp_180_fu_2785_p1;
    newSel13_fu_2883_p3 <= 
        tmp_81_fu_2789_p3 when (sel_tmp41_fu_2840_p2(0) = '1') else 
        tmp_179_reg_4895;
    newSel14_fu_2896_p3 <= 
        newSel12_fu_2869_p3 when (or_cond12_fu_2877_p2(0) = '1') else 
        newSel13_fu_2883_p3;
    newSel15_fu_3024_p3 <= 
        tmp_187_fu_2960_p1 when (sel_tmp53_fu_3018_p2(0) = '1') else 
        tmp_186_fu_2940_p1;
    newSel16_fu_3038_p3 <= 
        tmp_96_fu_2944_p3 when (sel_tmp50_fu_2995_p2(0) = '1') else 
        tmp_185_reg_4925;
    newSel17_fu_3051_p3 <= 
        newSel15_fu_3024_p3 when (or_cond15_fu_3032_p2(0) = '1') else 
        newSel16_fu_3038_p3;
    newSel18_fu_3179_p3 <= 
        tmp_193_fu_3115_p1 when (sel_tmp62_fu_3173_p2(0) = '1') else 
        tmp_192_fu_3095_p1;
    newSel19_fu_3193_p3 <= 
        tmp_112_fu_3099_p3 when (sel_tmp59_fu_3150_p2(0) = '1') else 
        tmp_191_reg_4955;
    newSel1_fu_2263_p3 <= 
        tmp_19_fu_2169_p3 when (sel_tmp9_fu_2220_p2(0) = '1') else 
        tmp_30_reg_4775;
    newSel20_fu_3206_p3 <= 
        newSel18_fu_3179_p3 when (or_cond18_fu_3187_p2(0) = '1') else 
        newSel19_fu_3193_p3;
    newSel21_fu_3334_p3 <= 
        tmp_199_fu_3270_p1 when (sel_tmp71_fu_3328_p2(0) = '1') else 
        tmp_198_fu_3250_p1;
    newSel22_fu_3348_p3 <= 
        tmp_127_fu_3254_p3 when (sel_tmp68_fu_3305_p2(0) = '1') else 
        tmp_197_reg_4985;
    newSel23_fu_3361_p3 <= 
        newSel21_fu_3334_p3 when (or_cond21_fu_3342_p2(0) = '1') else 
        newSel22_fu_3348_p3;
    newSel2_fu_2276_p3 <= 
        newSel_fu_2249_p3 when (or_cond_fu_2257_p2(0) = '1') else 
        newSel1_fu_2263_p3;
    newSel3_fu_2586_p3 <= 
        newSel8_fu_2559_p3 when (or_cond6_fu_2567_p2(0) = '1') else 
        newSel9_fu_2573_p3;
    newSel4_fu_2404_p3 <= 
        tmp_71_fu_2340_p1 when (sel_tmp17_fu_2398_p2(0) = '1') else 
        tmp_67_fu_2320_p1;
    newSel5_fu_2418_p3 <= 
        tmp_34_fu_2324_p3 when (sel_tmp14_fu_2375_p2(0) = '1') else 
        tmp_62_reg_4805;
    newSel6_fu_2431_p3 <= 
        newSel4_fu_2404_p3 when (or_cond3_fu_2412_p2(0) = '1') else 
        newSel5_fu_2418_p3;
    newSel7_fu_2714_p3 <= 
        tmp_135_fu_2650_p1 when (sel_tmp35_fu_2708_p2(0) = '1') else 
        tmp_131_fu_2630_p1;
    newSel8_fu_2559_p3 <= 
        tmp_103_fu_2495_p1 when (sel_tmp26_fu_2553_p2(0) = '1') else 
        tmp_99_fu_2475_p1;
    newSel9_fu_2573_p3 <= 
        tmp_50_fu_2479_p3 when (sel_tmp23_fu_2530_p2(0) = '1') else 
        tmp_94_reg_4835;
    newSel_fu_2249_p3 <= 
        tmp_39_fu_2185_p1 when (sel_tmp4_fu_2243_p2(0) = '1') else 
        tmp_35_fu_2165_p1;
    or_cond10_fu_2735_p2 <= (sel_tmp32_fu_2685_p2 or sel_tmp28_fu_2659_p2);
    or_cond11_fu_2749_p2 <= (or_cond9_fu_2722_p2 or or_cond10_fu_2735_p2);
    or_cond12_fu_2877_p2 <= (sel_tmp44_fu_2863_p2 or sel_tmp42_fu_2846_p2);
    or_cond13_fu_2890_p2 <= (sel_tmp41_fu_2840_p2 or sel_tmp37_fu_2814_p2);
    or_cond14_fu_2904_p2 <= (or_cond13_fu_2890_p2 or or_cond12_fu_2877_p2);
    or_cond15_fu_3032_p2 <= (sel_tmp53_fu_3018_p2 or sel_tmp51_fu_3001_p2);
    or_cond16_fu_3045_p2 <= (sel_tmp50_fu_2995_p2 or sel_tmp46_fu_2969_p2);
    or_cond17_fu_3059_p2 <= (or_cond16_fu_3045_p2 or or_cond15_fu_3032_p2);
    or_cond18_fu_3187_p2 <= (sel_tmp62_fu_3173_p2 or sel_tmp60_fu_3156_p2);
    or_cond19_fu_3200_p2 <= (sel_tmp59_fu_3150_p2 or sel_tmp55_fu_3124_p2);
    or_cond1_fu_2270_p2 <= (sel_tmp9_fu_2220_p2 or sel_tmp2_fu_2194_p2);
    or_cond20_fu_3214_p2 <= (or_cond19_fu_3200_p2 or or_cond18_fu_3187_p2);
    or_cond21_fu_3342_p2 <= (sel_tmp71_fu_3328_p2 or sel_tmp69_fu_3311_p2);
    or_cond22_fu_3355_p2 <= (sel_tmp68_fu_3305_p2 or sel_tmp64_fu_3279_p2);
    or_cond23_fu_3369_p2 <= (or_cond22_fu_3355_p2 or or_cond21_fu_3342_p2);
    or_cond2_fu_2284_p2 <= (or_cond_fu_2257_p2 or or_cond1_fu_2270_p2);
    or_cond3_fu_2412_p2 <= (sel_tmp17_fu_2398_p2 or sel_tmp15_fu_2381_p2);
    or_cond4_fu_2425_p2 <= (sel_tmp14_fu_2375_p2 or sel_tmp10_fu_2349_p2);
    or_cond5_fu_2439_p2 <= (or_cond4_fu_2425_p2 or or_cond3_fu_2412_p2);
    or_cond6_fu_2567_p2 <= (sel_tmp26_fu_2553_p2 or sel_tmp24_fu_2536_p2);
    or_cond7_fu_2580_p2 <= (sel_tmp23_fu_2530_p2 or sel_tmp19_fu_2504_p2);
    or_cond8_fu_2594_p2 <= (or_cond7_fu_2580_p2 or or_cond6_fu_2567_p2);
    or_cond9_fu_2722_p2 <= (sel_tmp35_fu_2708_p2 or sel_tmp33_fu_2691_p2);
    or_cond_fu_2257_p2 <= (sel_tmp_fu_2226_p2 or sel_tmp4_fu_2243_p2);

    out_trans_din_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, tmp_143_reg_5418, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            out_trans_din_V_address0 <= tmp_143_reg_5418(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_trans_din_V_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_trans_din_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_trans_din_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_trans_din_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_trans_din_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_trans_din_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_trans_din_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            out_trans_din_V_address0 <= "XXXX";
        end if; 
    end process;


    out_trans_din_V_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, out_trans_din_V_addr_14_reg_5453_pp1_iter11_reg, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            out_trans_din_V_address1 <= out_trans_din_V_addr_14_reg_5453_pp1_iter11_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_trans_din_V_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_trans_din_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_trans_din_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_trans_din_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_trans_din_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_trans_din_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_trans_din_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            out_trans_din_V_address1 <= "XXXX";
        end if; 
    end process;


    out_trans_din_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            out_trans_din_V_ce0 <= ap_const_logic_1;
        else 
            out_trans_din_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_trans_din_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1)))) then 
            out_trans_din_V_ce1 <= ap_const_logic_1;
        else 
            out_trans_din_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_trans_din_V_d1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0, p_Val2_7_fu_4160_p2)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            out_trans_din_V_d1 <= p_Val2_7_fu_4160_p2(21 downto 2);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_trans_din_V_d1 <= ap_const_lv20_0;
        else 
            out_trans_din_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_trans_din_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_trans_din_V_we0 <= ap_const_logic_1;
        else 
            out_trans_din_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_trans_din_V_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp1_stage0_11001, exitcond2_reg_5409_pp1_iter11_reg, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1)))) then 
            out_trans_din_V_we1 <= ap_const_logic_1;
        else 
            out_trans_din_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(tmp_143_reg_5418_pp1_iter11_reg, ap_CS_fsm_state51, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0, tmp_i_fu_4214_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            output_V_address0 <= tmp_i_fu_4214_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            output_V_address0 <= tmp_143_reg_5418_pp1_iter11_reg(4 - 1 downto 0);
        else 
            output_V_address0 <= "XXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state51, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= (tmp_171_fu_4183_p4 & ap_const_lv2_0);

    output_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond2_reg_5409_pp1_iter11_reg, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond2_reg_5409_pp1_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_b_V_address0 <= tmp_143_reg_5418_pp1_iter10_reg(4 - 1 downto 0);

    output_b_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))) then 
            output_b_V_ce0 <= ap_const_logic_1;
        else 
            output_b_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_1670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1663_p3),54));
    p_Result_2_fu_1739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1732_p3),54));
    p_Result_3_fu_1808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1801_p3),54));
    p_Result_4_fu_1877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1870_p3),54));
    p_Result_5_fu_1946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1939_p3),54));
    p_Result_6_fu_2015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_2008_p3),54));
    p_Result_7_fu_2084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_2077_p3),54));
    p_Result_s_fu_1601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1594_p3),54));
    p_Val2_1_fu_3447_p2 <= std_logic_vector(unsigned(tmp_132_fu_3439_p3) + unsigned(p_Val2_s_reg_5114));
    p_Val2_3_fu_3643_p2 <= std_logic_vector(unsigned(tmp_140_fu_3633_p3) + unsigned(tmp_164_cast_fu_3640_p1));
    p_Val2_43_1_fu_4256_p0 <= OP1_V_1_cast_reg_5016(20 - 1 downto 0);
    p_Val2_43_2_fu_4261_p0 <= OP1_V_2_cast_reg_5021(20 - 1 downto 0);
    p_Val2_43_3_fu_4266_p0 <= OP1_V_3_cast_reg_5026(20 - 1 downto 0);
    p_Val2_43_4_fu_4271_p0 <= OP1_V_4_cast_reg_5031(20 - 1 downto 0);
    p_Val2_43_5_fu_4276_p0 <= OP1_V_5_cast_reg_5036(20 - 1 downto 0);
    p_Val2_43_6_fu_4281_p0 <= OP1_V_cast_15_reg_5041(20 - 1 downto 0);
    p_Val2_44_1_fu_3470_p2 <= std_logic_vector(unsigned(tmp_201_1_fu_3462_p3) + unsigned(p_Val2_43_1_reg_5119));
    p_Val2_44_2_fu_3501_p2 <= std_logic_vector(unsigned(tmp_201_2_fu_3494_p3) + unsigned(p_Val2_43_2_reg_5149));
    p_Val2_44_3_fu_3524_p2 <= std_logic_vector(unsigned(tmp_201_3_fu_3516_p3) + unsigned(p_Val2_43_3_reg_5159));
    p_Val2_44_4_fu_3547_p2 <= std_logic_vector(unsigned(tmp_201_4_fu_3539_p3) + unsigned(p_Val2_43_4_reg_5164));
    p_Val2_44_5_fu_3575_p2 <= std_logic_vector(unsigned(tmp_201_5_fu_3568_p3) + unsigned(p_Val2_43_5_reg_5184));
    p_Val2_44_6_fu_3598_p2 <= std_logic_vector(unsigned(tmp_201_6_fu_3590_p3) + unsigned(p_Val2_43_6_reg_5194));
    p_Val2_7_fu_4160_p2 <= std_logic_vector(signed(tmp_170_cast_fu_4139_p1) + signed(tmp_147_fu_4131_p3));
    p_Val2_s_fu_4251_p0 <= OP1_V_cast_reg_5011(20 - 1 downto 0);
    sel_tmp102_demorgan_fu_2819_p2 <= (tmp_75_reg_4889 or tmp_70_reg_4669);
    sel_tmp10_fu_2349_p2 <= (tmp_28_reg_4799 and sel_tmp5_fu_2344_p2);
    sel_tmp117_demorgan_fu_2852_p2 <= (tmp_72_reg_4876 or sel_tmp102_demorgan_fu_2819_p2);
    sel_tmp11_fu_2358_p2 <= (sel_tmp30_demorgan_fu_2354_p2 xor ap_const_lv1_1);
    sel_tmp126_demorgan_fu_2974_p2 <= (tmp_90_reg_4919 or tmp_85_reg_4691);
    sel_tmp12_fu_2364_p2 <= (tmp_25_reg_4786 and sel_tmp11_fu_2358_p2);
    sel_tmp13_fu_2369_p2 <= (tmp_29_fu_2301_p2 xor ap_const_lv1_1);
    sel_tmp141_demorgan_fu_3007_p2 <= (tmp_86_reg_4906 or sel_tmp126_demorgan_fu_2974_p2);
    sel_tmp14_fu_2375_p2 <= (sel_tmp13_fu_2369_p2 and sel_tmp12_fu_2364_p2);
    sel_tmp150_demorgan_fu_3129_p2 <= (tmp_106_reg_4949 or tmp_101_reg_4713);
    sel_tmp15_fu_2381_p2 <= (tmp_29_fu_2301_p2 and sel_tmp12_fu_2364_p2);
    sel_tmp165_demorgan_fu_3162_p2 <= (tmp_102_reg_4936 or sel_tmp150_demorgan_fu_3129_p2);
    sel_tmp16_fu_2392_p2 <= (sel_tmp45_demorgan_fu_2387_p2 xor ap_const_lv1_1);
    sel_tmp174_demorgan_fu_3284_p2 <= (tmp_121_reg_4979 or tmp_116_reg_4735);
    sel_tmp17_fu_2398_p2 <= (tmp_31_fu_2306_p2 and sel_tmp16_fu_2392_p2);
    sel_tmp189_demorgan_fu_3317_p2 <= (tmp_117_reg_4966 or sel_tmp174_demorgan_fu_3284_p2);
    sel_tmp18_fu_2499_p2 <= (tmp_40_reg_4625 xor ap_const_lv1_1);
    sel_tmp19_fu_2504_p2 <= (tmp_44_reg_4829 and sel_tmp18_fu_2499_p2);
    sel_tmp1_fu_2189_p2 <= (tmp_9_reg_4581 xor ap_const_lv1_1);
    sel_tmp20_fu_2513_p2 <= (sel_tmp54_demorgan_fu_2509_p2 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_2232_p2 <= (tmp_10_reg_4756 or sel_tmp6_demorgan_fu_2199_p2);
    sel_tmp21_fu_2519_p2 <= (tmp_41_reg_4816 and sel_tmp20_fu_2513_p2);
    sel_tmp22_fu_2524_p2 <= (tmp_45_fu_2456_p2 xor ap_const_lv1_1);
    sel_tmp23_fu_2530_p2 <= (sel_tmp22_fu_2524_p2 and sel_tmp21_fu_2519_p2);
    sel_tmp24_fu_2536_p2 <= (tmp_45_fu_2456_p2 and sel_tmp21_fu_2519_p2);
    sel_tmp25_fu_2547_p2 <= (sel_tmp69_demorgan_fu_2542_p2 xor ap_const_lv1_1);
    sel_tmp26_fu_2553_p2 <= (tmp_47_fu_2461_p2 and sel_tmp25_fu_2547_p2);
    sel_tmp27_fu_2654_p2 <= (tmp_54_reg_4647 xor ap_const_lv1_1);
    sel_tmp28_fu_2659_p2 <= (tmp_59_reg_4859 and sel_tmp27_fu_2654_p2);
    sel_tmp29_fu_2668_p2 <= (sel_tmp78_demorgan_fu_2664_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_2194_p2 <= (tmp_13_reg_4769 and sel_tmp1_fu_2189_p2);
    sel_tmp30_demorgan_fu_2354_p2 <= (tmp_28_reg_4799 or tmp_24_reg_4603);
    sel_tmp30_fu_2674_p2 <= (tmp_56_reg_4846 and sel_tmp29_fu_2668_p2);
    sel_tmp31_fu_2679_p2 <= (tmp_60_fu_2611_p2 xor ap_const_lv1_1);
    sel_tmp32_fu_2685_p2 <= (sel_tmp31_fu_2679_p2 and sel_tmp30_fu_2674_p2);
    sel_tmp33_fu_2691_p2 <= (tmp_60_fu_2611_p2 and sel_tmp30_fu_2674_p2);
    sel_tmp34_fu_2702_p2 <= (sel_tmp93_demorgan_fu_2697_p2 xor ap_const_lv1_1);
    sel_tmp35_fu_2708_p2 <= (tmp_61_fu_2616_p2 and sel_tmp34_fu_2702_p2);
    sel_tmp36_fu_2809_p2 <= (tmp_70_reg_4669 xor ap_const_lv1_1);
    sel_tmp37_fu_2814_p2 <= (tmp_75_reg_4889 and sel_tmp36_fu_2809_p2);
    sel_tmp38_fu_2823_p2 <= (sel_tmp102_demorgan_fu_2819_p2 xor ap_const_lv1_1);
    sel_tmp39_fu_2829_p2 <= (tmp_72_reg_4876 and sel_tmp38_fu_2823_p2);
    sel_tmp3_fu_2237_p2 <= (sel_tmp21_demorgan_fu_2232_p2 xor ap_const_lv1_1);
    sel_tmp40_fu_2834_p2 <= (tmp_76_fu_2766_p2 xor ap_const_lv1_1);
    sel_tmp41_fu_2840_p2 <= (sel_tmp40_fu_2834_p2 and sel_tmp39_fu_2829_p2);
    sel_tmp42_fu_2846_p2 <= (tmp_76_fu_2766_p2 and sel_tmp39_fu_2829_p2);
    sel_tmp43_fu_2857_p2 <= (sel_tmp117_demorgan_fu_2852_p2 xor ap_const_lv1_1);
    sel_tmp44_fu_2863_p2 <= (tmp_77_fu_2771_p2 and sel_tmp43_fu_2857_p2);
    sel_tmp45_demorgan_fu_2387_p2 <= (tmp_25_reg_4786 or sel_tmp30_demorgan_fu_2354_p2);
    sel_tmp45_fu_2964_p2 <= (tmp_85_reg_4691 xor ap_const_lv1_1);
    sel_tmp46_fu_2969_p2 <= (tmp_90_reg_4919 and sel_tmp45_fu_2964_p2);
    sel_tmp47_fu_2978_p2 <= (sel_tmp126_demorgan_fu_2974_p2 xor ap_const_lv1_1);
    sel_tmp48_fu_2984_p2 <= (tmp_86_reg_4906 and sel_tmp47_fu_2978_p2);
    sel_tmp49_fu_2989_p2 <= (tmp_91_fu_2921_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_2243_p2 <= (tmp_16_fu_2151_p2 and sel_tmp3_fu_2237_p2);
    sel_tmp50_fu_2995_p2 <= (sel_tmp49_fu_2989_p2 and sel_tmp48_fu_2984_p2);
    sel_tmp51_fu_3001_p2 <= (tmp_91_fu_2921_p2 and sel_tmp48_fu_2984_p2);
    sel_tmp52_fu_3012_p2 <= (sel_tmp141_demorgan_fu_3007_p2 xor ap_const_lv1_1);
    sel_tmp53_fu_3018_p2 <= (tmp_92_fu_2926_p2 and sel_tmp52_fu_3012_p2);
    sel_tmp54_demorgan_fu_2509_p2 <= (tmp_44_reg_4829 or tmp_40_reg_4625);
    sel_tmp54_fu_3119_p2 <= (tmp_101_reg_4713 xor ap_const_lv1_1);
    sel_tmp55_fu_3124_p2 <= (tmp_106_reg_4949 and sel_tmp54_fu_3119_p2);
    sel_tmp56_fu_3133_p2 <= (sel_tmp150_demorgan_fu_3129_p2 xor ap_const_lv1_1);
    sel_tmp57_fu_3139_p2 <= (tmp_102_reg_4936 and sel_tmp56_fu_3133_p2);
    sel_tmp58_fu_3144_p2 <= (tmp_107_fu_3076_p2 xor ap_const_lv1_1);
    sel_tmp59_fu_3150_p2 <= (sel_tmp58_fu_3144_p2 and sel_tmp57_fu_3139_p2);
    sel_tmp5_fu_2344_p2 <= (tmp_24_reg_4603 xor ap_const_lv1_1);
    sel_tmp60_fu_3156_p2 <= (tmp_107_fu_3076_p2 and sel_tmp57_fu_3139_p2);
    sel_tmp61_fu_3167_p2 <= (sel_tmp165_demorgan_fu_3162_p2 xor ap_const_lv1_1);
    sel_tmp62_fu_3173_p2 <= (tmp_108_fu_3081_p2 and sel_tmp61_fu_3167_p2);
    sel_tmp63_fu_3274_p2 <= (tmp_116_reg_4735 xor ap_const_lv1_1);
    sel_tmp64_fu_3279_p2 <= (tmp_121_reg_4979 and sel_tmp63_fu_3274_p2);
    sel_tmp65_fu_3288_p2 <= (sel_tmp174_demorgan_fu_3284_p2 xor ap_const_lv1_1);
    sel_tmp66_fu_3294_p2 <= (tmp_117_reg_4966 and sel_tmp65_fu_3288_p2);
    sel_tmp67_fu_3299_p2 <= (tmp_122_fu_3231_p2 xor ap_const_lv1_1);
    sel_tmp68_fu_3305_p2 <= (sel_tmp67_fu_3299_p2 and sel_tmp66_fu_3294_p2);
    sel_tmp69_demorgan_fu_2542_p2 <= (tmp_41_reg_4816 or sel_tmp54_demorgan_fu_2509_p2);
    sel_tmp69_fu_3311_p2 <= (tmp_122_fu_3231_p2 and sel_tmp66_fu_3294_p2);
    sel_tmp6_demorgan_fu_2199_p2 <= (tmp_9_reg_4581 or tmp_13_reg_4769);
    sel_tmp6_fu_2203_p2 <= (sel_tmp6_demorgan_fu_2199_p2 xor ap_const_lv1_1);
    sel_tmp70_fu_3322_p2 <= (sel_tmp189_demorgan_fu_3317_p2 xor ap_const_lv1_1);
    sel_tmp71_fu_3328_p2 <= (tmp_123_fu_3236_p2 and sel_tmp70_fu_3322_p2);
    sel_tmp78_demorgan_fu_2664_p2 <= (tmp_59_reg_4859 or tmp_54_reg_4647);
    sel_tmp7_fu_2209_p2 <= (tmp_10_reg_4756 and sel_tmp6_fu_2203_p2);
    sel_tmp8_fu_2214_p2 <= (tmp_15_fu_2146_p2 xor ap_const_lv1_1);
    sel_tmp93_demorgan_fu_2697_p2 <= (tmp_56_reg_4846 or sel_tmp78_demorgan_fu_2664_p2);
    sel_tmp9_fu_2220_p2 <= (sel_tmp8_fu_2214_p2 and sel_tmp7_fu_2209_p2);
    sel_tmp_fu_2226_p2 <= (tmp_15_fu_2146_p2 and sel_tmp7_fu_2209_p2);
        sh_amt_1_cast_fu_2298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_4792),32));

    sh_amt_1_fu_1711_p3 <= 
        tmp_26_fu_1699_p2 when (tmp_25_fu_1693_p2(0) = '1') else 
        tmp_27_fu_1705_p2;
        sh_amt_2_cast_fu_2453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_4822),32));

    sh_amt_2_fu_1780_p3 <= 
        tmp_42_fu_1768_p2 when (tmp_41_fu_1762_p2(0) = '1') else 
        tmp_43_fu_1774_p2;
        sh_amt_3_cast_fu_2608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_4852),32));

    sh_amt_3_fu_1849_p3 <= 
        tmp_57_fu_1837_p2 when (tmp_56_fu_1831_p2(0) = '1') else 
        tmp_58_fu_1843_p2;
        sh_amt_4_cast_fu_2763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_4_reg_4882),32));

    sh_amt_4_fu_1918_p3 <= 
        tmp_73_fu_1906_p2 when (tmp_72_fu_1900_p2(0) = '1') else 
        tmp_74_fu_1912_p2;
        sh_amt_5_cast_fu_2918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_5_reg_4912),32));

    sh_amt_5_fu_1987_p3 <= 
        tmp_88_fu_1975_p2 when (tmp_86_fu_1969_p2(0) = '1') else 
        tmp_89_fu_1981_p2;
        sh_amt_6_cast_fu_3073_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_6_reg_4942),32));

    sh_amt_6_fu_2056_p3 <= 
        tmp_104_fu_2044_p2 when (tmp_102_fu_2038_p2(0) = '1') else 
        tmp_105_fu_2050_p2;
        sh_amt_7_cast_fu_3228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_7_reg_4972),32));

    sh_amt_7_fu_2125_p3 <= 
        tmp_118_fu_2113_p2 when (tmp_117_fu_2107_p2(0) = '1') else 
        tmp_120_fu_2119_p2;
        sh_amt_cast_fu_2143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_4762),32));

    sh_amt_fu_1642_p3 <= 
        tmp_11_fu_1630_p2 when (tmp_10_fu_1624_p2(0) = '1') else 
        tmp_12_fu_1636_p2;
    tmp_100_fu_2005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_6_reg_4703),12));
    tmp_101_fu_1549_p2 <= "1" when (tmp_188_fu_1523_p1 = ap_const_lv63_0) else "0";
    tmp_102_fu_2038_p2 <= "1" when (signed(F2_6_fu_2032_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_103_fu_2495_p1 <= tmp_52_fu_2489_p2(20 - 1 downto 0);
    tmp_104_fu_2044_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_6_fu_2032_p2));
    tmp_105_fu_2050_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_6_fu_2032_p2));
    tmp_106_fu_2064_p2 <= "1" when (F2_6_fu_2032_p2 = ap_const_lv12_10) else "0";
    tmp_107_fu_3076_p2 <= "1" when (unsigned(sh_amt_6_reg_4942) < unsigned(ap_const_lv12_36)) else "0";
    tmp_108_fu_3081_p2 <= "1" when (unsigned(sh_amt_6_reg_4942) < unsigned(ap_const_lv12_14)) else "0";
    tmp_109_fu_3086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_6_cast_fu_3073_p1),54));
    tmp_10_fu_1624_p2 <= "1" when (signed(F2_fu_1618_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_110_fu_1415_p1 <= ireg_V_3_fu_1411_p1(63 - 1 downto 0);
    tmp_111_fu_3090_p2 <= std_logic_vector(shift_right(signed(man_V_20_reg_4931),to_integer(unsigned('0' & tmp_109_fu_3086_p1(31-1 downto 0)))));
    tmp_112_fu_3099_p3 <= 
        ap_const_lv20_FFFFF when (isneg_6_reg_4697(0) = '1') else 
        ap_const_lv20_0;
        tmp_113_fu_3106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_191_reg_4955),32));

    tmp_114_fu_3109_p2 <= std_logic_vector(shift_left(unsigned(tmp_113_fu_3106_p1),to_integer(unsigned('0' & sh_amt_6_cast_fu_3073_p1(31-1 downto 0)))));
    tmp_115_fu_2074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_7_reg_4725),12));
    tmp_116_fu_1585_p2 <= "1" when (tmp_194_fu_1559_p1 = ap_const_lv63_0) else "0";
    tmp_117_fu_2107_p2 <= "1" when (signed(F2_7_fu_2101_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_118_fu_2113_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_7_fu_2101_p2));
    tmp_119_fu_1437_p1 <= ireg_V_3_fu_1411_p1(52 - 1 downto 0);
    tmp_11_fu_1630_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_1618_p2));
    tmp_120_fu_2119_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_7_fu_2101_p2));
    tmp_121_fu_2133_p2 <= "1" when (F2_7_fu_2101_p2 = ap_const_lv12_10) else "0";
    tmp_122_fu_3231_p2 <= "1" when (unsigned(sh_amt_7_reg_4972) < unsigned(ap_const_lv12_36)) else "0";
    tmp_123_fu_3236_p2 <= "1" when (unsigned(sh_amt_7_reg_4972) < unsigned(ap_const_lv12_14)) else "0";
    tmp_124_fu_3241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_7_cast_fu_3228_p1),54));
    tmp_125_fu_3245_p2 <= std_logic_vector(shift_right(signed(man_V_23_reg_4961),to_integer(unsigned('0' & tmp_124_fu_3241_p1(31-1 downto 0)))));
    tmp_126_fu_1863_p1 <= man_V_11_fu_1818_p3(20 - 1 downto 0);
    tmp_127_fu_3254_p3 <= 
        ap_const_lv20_FFFFF when (isneg_7_reg_4719(0) = '1') else 
        ap_const_lv20_0;
        tmp_128_fu_3261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_197_reg_4985),32));

    tmp_129_fu_3264_p2 <= std_logic_vector(shift_left(unsigned(tmp_128_fu_3261_p1),to_integer(unsigned('0' & sh_amt_7_cast_fu_3228_p1(31-1 downto 0)))));
    tmp_12_fu_1636_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_1618_p2));
    tmp_130_fu_3427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1207),64));
    tmp_131_fu_2630_p1 <= tmp_64_fu_2625_p2(20 - 1 downto 0);
    tmp_132_fu_3439_p3 <= (hid1_trans_din_V_q0 & ap_const_lv17_0);
    tmp_133_fu_3452_p4 <= p_Val2_1_fu_3447_p2(36 downto 17);
    tmp_135_fu_2650_p1 <= tmp_68_fu_2644_p2(20 - 1 downto 0);
    tmp_136_fu_3506_p4 <= p_Val2_44_2_fu_3501_p2(36 downto 17);
    tmp_137_fu_3529_p4 <= p_Val2_44_3_fu_3524_p2(36 downto 17);
    tmp_139_fu_3580_p4 <= p_Val2_44_5_fu_3575_p2(36 downto 17);
    tmp_13_fu_1650_p2 <= "1" when (F2_fu_1618_p2 = ap_const_lv12_10) else "0";
    tmp_140_fu_3633_p3 <= (tmp_145_reg_5209 & ap_const_lv2_0);
    tmp_141_fu_3606_p4 <= p_Val2_44_6_fu_3598_p2(36 downto 17);
    tmp_143_fu_3735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_1218),64));
    tmp_146_fu_3755_p4 <= grp_fu_4294_p3(38 downto 19);
    tmp_147_fu_4131_p3 <= (tmp_169_fu_4122_p4 & ap_const_lv2_0);
    tmp_148_fu_4152_p3 <= (tmp_170_fu_4143_p4 & ap_const_lv2_0);
    tmp_14_fu_1307_p1 <= ireg_V_fu_1303_p1(63 - 1 downto 0);
    tmp_150_fu_4177_p1 <= output_b_V_q0;
    tmp_150_fu_4177_p2 <= std_logic_vector(unsigned(tmp_148_fu_4152_p3) + unsigned(tmp_150_fu_4177_p1));
    tmp_152_fu_3794_p4 <= grp_fu_4310_p3(38 downto 19);
    tmp_154_fu_3833_p4 <= grp_fu_4326_p3(38 downto 19);
    tmp_156_fu_3872_p4 <= grp_fu_4342_p3(38 downto 19);
    tmp_158_fu_3911_p4 <= grp_fu_4358_p3(38 downto 19);
    tmp_15_fu_2146_p2 <= "1" when (unsigned(sh_amt_reg_4762) < unsigned(ap_const_lv12_36)) else "0";
    tmp_160_fu_3950_p4 <= grp_fu_4374_p3(38 downto 19);
    tmp_162_fu_3989_p4 <= grp_fu_4390_p3(38 downto 19);
        tmp_164_cast_fu_3640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_reg_5214),22));

    tmp_164_fu_4028_p4 <= grp_fu_4406_p3(38 downto 19);
    tmp_166_fu_4067_p4 <= grp_fu_4422_p3(38 downto 19);
    tmp_169_fu_4122_p4 <= grp_fu_4446_p3(38 downto 19);
    tmp_16_fu_2151_p2 <= "1" when (unsigned(sh_amt_reg_4762) < unsigned(ap_const_lv12_14)) else "0";
    tmp_170_cast_fu_4139_p0 <= output_b_V_q0;
        tmp_170_cast_fu_4139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_170_cast_fu_4139_p0),22));

    tmp_170_fu_4143_p4 <= grp_fu_4446_p3(36 downto 19);
    tmp_171_fu_4183_p4 <= tmp_150_fu_4177_p2(19 downto 2);
    tmp_176_fu_1451_p1 <= ireg_V_4_fu_1447_p1(63 - 1 downto 0);
    tmp_178_fu_1473_p1 <= ireg_V_4_fu_1447_p1(52 - 1 downto 0);
    tmp_179_fu_1932_p1 <= man_V_14_fu_1887_p3(20 - 1 downto 0);
    tmp_17_fu_2156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_2143_p1),54));
    tmp_180_fu_2785_p1 <= tmp_80_fu_2780_p2(20 - 1 downto 0);
    tmp_181_fu_2805_p1 <= tmp_83_fu_2799_p2(20 - 1 downto 0);
    tmp_182_fu_1487_p1 <= ireg_V_5_fu_1483_p1(63 - 1 downto 0);
    tmp_184_fu_1509_p1 <= ireg_V_5_fu_1483_p1(52 - 1 downto 0);
    tmp_185_fu_2001_p1 <= man_V_17_fu_1956_p3(20 - 1 downto 0);
    tmp_186_fu_2940_p1 <= tmp_95_fu_2935_p2(20 - 1 downto 0);
    tmp_187_fu_2960_p1 <= tmp_98_fu_2954_p2(20 - 1 downto 0);
    tmp_188_fu_1523_p1 <= ireg_V_6_fu_1519_p1(63 - 1 downto 0);
    tmp_18_fu_2160_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_4751),to_integer(unsigned('0' & tmp_17_fu_2156_p1(31-1 downto 0)))));
    tmp_190_fu_1545_p1 <= ireg_V_6_fu_1519_p1(52 - 1 downto 0);
    tmp_191_fu_2070_p1 <= man_V_20_fu_2025_p3(20 - 1 downto 0);
    tmp_192_fu_3095_p1 <= tmp_111_fu_3090_p2(20 - 1 downto 0);
    tmp_193_fu_3115_p1 <= tmp_114_fu_3109_p2(20 - 1 downto 0);
    tmp_194_fu_1559_p1 <= ireg_V_7_fu_1555_p1(63 - 1 downto 0);
    tmp_196_fu_1581_p1 <= ireg_V_7_fu_1555_p1(52 - 1 downto 0);
    tmp_197_fu_2139_p1 <= man_V_23_fu_2094_p3(20 - 1 downto 0);
    tmp_198_fu_3250_p1 <= tmp_125_fu_3245_p2(20 - 1 downto 0);
    tmp_199_fu_3270_p1 <= tmp_129_fu_3264_p2(20 - 1 downto 0);
    tmp_19_fu_2169_p3 <= 
        ap_const_lv20_FFFFF when (isneg_reg_4565(0) = '1') else 
        ap_const_lv20_0;
    tmp_1_fu_1663_p3 <= (ap_const_lv1_1 & tmp_55_reg_4598);
    tmp_201_1_fu_3462_p3 <= (tmp_133_fu_3452_p4 & ap_const_lv17_0);
    tmp_201_2_fu_3494_p3 <= (tmp_134_reg_5154 & ap_const_lv17_0);
    tmp_201_3_fu_3516_p3 <= (tmp_136_fu_3506_p4 & ap_const_lv17_0);
    tmp_201_4_fu_3539_p3 <= (tmp_137_fu_3529_p4 & ap_const_lv17_0);
    tmp_201_5_fu_3568_p3 <= (tmp_138_reg_5189 & ap_const_lv17_0);
    tmp_201_6_fu_3590_p3 <= (tmp_139_fu_3580_p4 & ap_const_lv17_0);
        tmp_20_fu_2176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_reg_4775),32));

    tmp_21_fu_2179_p2 <= std_logic_vector(shift_left(unsigned(tmp_20_fu_2176_p1),to_integer(unsigned('0' & sh_amt_cast_fu_2143_p1(31-1 downto 0)))));
    tmp_22_fu_1660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_1_reg_4593),12));
    tmp_23_fu_1329_p1 <= ireg_V_fu_1303_p1(52 - 1 downto 0);
    tmp_24_fu_1369_p2 <= "1" when (tmp_46_fu_1343_p1 = ap_const_lv63_0) else "0";
    tmp_25_fu_1693_p2 <= "1" when (signed(F2_1_fu_1687_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_26_fu_1699_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_1_fu_1687_p2));
    tmp_27_fu_1705_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_1_fu_1687_p2));
    tmp_28_fu_1719_p2 <= "1" when (F2_1_fu_1687_p2 = ap_const_lv12_10) else "0";
    tmp_29_fu_2301_p2 <= "1" when (unsigned(sh_amt_1_reg_4792) < unsigned(ap_const_lv12_36)) else "0";
    tmp_2_fu_1732_p3 <= (ap_const_lv1_1 & tmp_87_reg_4620);
    tmp_30_fu_1656_p1 <= man_V_2_fu_1611_p3(20 - 1 downto 0);
    tmp_31_fu_2306_p2 <= "1" when (unsigned(sh_amt_1_reg_4792) < unsigned(ap_const_lv12_14)) else "0";
    tmp_32_fu_2311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_1_cast_fu_2298_p1),54));
    tmp_33_fu_2315_p2 <= std_logic_vector(shift_right(signed(man_V_5_reg_4781),to_integer(unsigned('0' & tmp_32_fu_2311_p1(31-1 downto 0)))));
    tmp_34_fu_2324_p3 <= 
        ap_const_lv20_FFFFF when (isneg_1_reg_4587(0) = '1') else 
        ap_const_lv20_0;
    tmp_35_fu_2165_p1 <= tmp_18_fu_2160_p2(20 - 1 downto 0);
        tmp_36_fu_2331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_reg_4805),32));

    tmp_37_fu_2334_p2 <= std_logic_vector(shift_left(unsigned(tmp_36_fu_2331_p1),to_integer(unsigned('0' & sh_amt_1_cast_fu_2298_p1(31-1 downto 0)))));
    tmp_38_fu_1729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_2_reg_4615),12));
    tmp_39_fu_2185_p1 <= tmp_21_fu_2179_p2(20 - 1 downto 0);
    tmp_3_fu_1801_p3 <= (ap_const_lv1_1 & tmp_119_reg_4642);
    tmp_40_fu_1405_p2 <= "1" when (tmp_78_fu_1379_p1 = ap_const_lv63_0) else "0";
    tmp_41_fu_1762_p2 <= "1" when (signed(F2_2_fu_1756_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_42_fu_1768_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_2_fu_1756_p2));
    tmp_43_fu_1774_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_2_fu_1756_p2));
    tmp_44_fu_1788_p2 <= "1" when (F2_2_fu_1756_p2 = ap_const_lv12_10) else "0";
    tmp_45_fu_2456_p2 <= "1" when (unsigned(sh_amt_2_reg_4822) < unsigned(ap_const_lv12_36)) else "0";
    tmp_46_fu_1343_p1 <= ireg_V_1_fu_1339_p1(63 - 1 downto 0);
    tmp_47_fu_2461_p2 <= "1" when (unsigned(sh_amt_2_reg_4822) < unsigned(ap_const_lv12_14)) else "0";
    tmp_48_fu_2466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_2_cast_fu_2453_p1),54));
    tmp_49_fu_2470_p2 <= std_logic_vector(shift_right(signed(man_V_8_reg_4811),to_integer(unsigned('0' & tmp_48_fu_2466_p1(31-1 downto 0)))));
    tmp_4_fu_1870_p3 <= (ap_const_lv1_1 & tmp_178_reg_4664);
    tmp_50_fu_2479_p3 <= 
        ap_const_lv20_FFFFF when (isneg_2_reg_4609(0) = '1') else 
        ap_const_lv20_0;
        tmp_51_fu_2486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_94_reg_4835),32));

    tmp_52_fu_2489_p2 <= std_logic_vector(shift_left(unsigned(tmp_51_fu_2486_p1),to_integer(unsigned('0' & sh_amt_2_cast_fu_2453_p1(31-1 downto 0)))));
    tmp_53_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_3_reg_4637),12));
    tmp_54_fu_1441_p2 <= "1" when (tmp_110_fu_1415_p1 = ap_const_lv63_0) else "0";
    tmp_55_fu_1365_p1 <= ireg_V_1_fu_1339_p1(52 - 1 downto 0);
    tmp_56_fu_1831_p2 <= "1" when (signed(F2_3_fu_1825_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_57_fu_1837_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_3_fu_1825_p2));
    tmp_58_fu_1843_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_3_fu_1825_p2));
    tmp_59_fu_1857_p2 <= "1" when (F2_3_fu_1825_p2 = ap_const_lv12_10) else "0";
    tmp_5_fu_1939_p3 <= (ap_const_lv1_1 & tmp_184_reg_4686);
    tmp_60_fu_2611_p2 <= "1" when (unsigned(sh_amt_3_reg_4852) < unsigned(ap_const_lv12_36)) else "0";
    tmp_61_fu_2616_p2 <= "1" when (unsigned(sh_amt_3_reg_4852) < unsigned(ap_const_lv12_14)) else "0";
    tmp_62_fu_1725_p1 <= man_V_5_fu_1680_p3(20 - 1 downto 0);
    tmp_63_fu_2621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_3_cast_fu_2608_p1),54));
    tmp_64_fu_2625_p2 <= std_logic_vector(shift_right(signed(man_V_11_reg_4841),to_integer(unsigned('0' & tmp_63_fu_2621_p1(31-1 downto 0)))));
    tmp_65_fu_2634_p3 <= 
        ap_const_lv20_FFFFF when (isneg_3_reg_4631(0) = '1') else 
        ap_const_lv20_0;
        tmp_66_fu_2641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_126_reg_4865),32));

    tmp_67_fu_2320_p1 <= tmp_33_fu_2315_p2(20 - 1 downto 0);
    tmp_68_fu_2644_p2 <= std_logic_vector(shift_left(unsigned(tmp_66_fu_2641_p1),to_integer(unsigned('0' & sh_amt_3_cast_fu_2608_p1(31-1 downto 0)))));
    tmp_69_fu_1867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_4_reg_4659),12));
    tmp_6_fu_2008_p3 <= (ap_const_lv1_1 & tmp_190_reg_4708);
    tmp_70_fu_1477_p2 <= "1" when (tmp_176_fu_1451_p1 = ap_const_lv63_0) else "0";
    tmp_71_fu_2340_p1 <= tmp_37_fu_2334_p2(20 - 1 downto 0);
    tmp_72_fu_1900_p2 <= "1" when (signed(F2_4_fu_1894_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_73_fu_1906_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_4_fu_1894_p2));
    tmp_74_fu_1912_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_4_fu_1894_p2));
    tmp_75_fu_1926_p2 <= "1" when (F2_4_fu_1894_p2 = ap_const_lv12_10) else "0";
    tmp_76_fu_2766_p2 <= "1" when (unsigned(sh_amt_4_reg_4882) < unsigned(ap_const_lv12_36)) else "0";
    tmp_77_fu_2771_p2 <= "1" when (unsigned(sh_amt_4_reg_4882) < unsigned(ap_const_lv12_14)) else "0";
    tmp_78_fu_1379_p1 <= ireg_V_2_fu_1375_p1(63 - 1 downto 0);
    tmp_79_fu_2776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_4_cast_fu_2763_p1),54));
    tmp_7_fu_2077_p3 <= (ap_const_lv1_1 & tmp_196_reg_4730);
    tmp_80_fu_2780_p2 <= std_logic_vector(shift_right(signed(man_V_14_reg_4871),to_integer(unsigned('0' & tmp_79_fu_2776_p1(31-1 downto 0)))));
    tmp_81_fu_2789_p3 <= 
        ap_const_lv20_FFFFF when (isneg_4_reg_4653(0) = '1') else 
        ap_const_lv20_0;
        tmp_82_fu_2796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_179_reg_4895),32));

    tmp_83_fu_2799_p2 <= std_logic_vector(shift_left(unsigned(tmp_82_fu_2796_p1),to_integer(unsigned('0' & sh_amt_4_cast_fu_2763_p1(31-1 downto 0)))));
    tmp_84_fu_1936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_5_reg_4681),12));
    tmp_85_fu_1513_p2 <= "1" when (tmp_182_fu_1487_p1 = ap_const_lv63_0) else "0";
    tmp_86_fu_1969_p2 <= "1" when (signed(F2_5_fu_1963_p2) > signed(ap_const_lv12_10)) else "0";
    tmp_87_fu_1401_p1 <= ireg_V_2_fu_1375_p1(52 - 1 downto 0);
    tmp_88_fu_1975_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_5_fu_1963_p2));
    tmp_89_fu_1981_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_5_fu_1963_p2));
    tmp_90_fu_1995_p2 <= "1" when (F2_5_fu_1963_p2 = ap_const_lv12_10) else "0";
    tmp_91_fu_2921_p2 <= "1" when (unsigned(sh_amt_5_reg_4912) < unsigned(ap_const_lv12_36)) else "0";
    tmp_92_fu_2926_p2 <= "1" when (unsigned(sh_amt_5_reg_4912) < unsigned(ap_const_lv12_14)) else "0";
    tmp_93_fu_2931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_5_cast_fu_2918_p1),54));
    tmp_94_fu_1794_p1 <= man_V_8_fu_1749_p3(20 - 1 downto 0);
    tmp_95_fu_2935_p2 <= std_logic_vector(shift_right(signed(man_V_17_reg_4901),to_integer(unsigned('0' & tmp_93_fu_2931_p1(31-1 downto 0)))));
    tmp_96_fu_2944_p3 <= 
        ap_const_lv20_FFFFF when (isneg_5_reg_4675(0) = '1') else 
        ap_const_lv20_0;
        tmp_97_fu_2951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_185_reg_4925),32));

    tmp_98_fu_2954_p2 <= std_logic_vector(shift_left(unsigned(tmp_97_fu_2951_p1),to_integer(unsigned('0' & sh_amt_5_cast_fu_2918_p1(31-1 downto 0)))));
    tmp_99_fu_2475_p1 <= tmp_49_fu_2470_p2(20 - 1 downto 0);
    tmp_9_fu_1333_p2 <= "1" when (tmp_14_fu_1307_p1 = ap_const_lv63_0) else "0";
    tmp_fu_1594_p3 <= (ap_const_lv1_1 & tmp_23_reg_4576);
    tmp_i_23_fu_4219_p2 <= "1" when (signed(output_V_q0) > signed(p_0_i_reg_1229)) else "0";
    tmp_i_fu_4214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_1241),64));
    tmp_s_fu_1591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_4571),12));
end behav;
